<div class="file-content code js-syntax-highlight white" id="blob-content">
    <div class="line-numbers">
        <a class="file-line-num diff-line-num"
           data-line-number="1"
           id="L1" href="#L1">1</a><a class="file-line-num diff-line-num"
           data-line-number="2"
           id="L2" href="#L2">2</a><a class="file-line-num diff-line-num"
           data-line-number="3"
           id="L3" href="#L3">3</a><a class="file-line-num diff-line-num"
           data-line-number="4"
           id="L4" href="#L4">4</a><a class="file-line-num diff-line-num"
           data-line-number="5"
           id="L5" href="#L5">5</a><a class="file-line-num diff-line-num"
           data-line-number="6"
           id="L6" href="#L6">6</a><a class="file-line-num diff-line-num"
           data-line-number="7"
           id="L7" href="#L7">7</a><a class="file-line-num diff-line-num"
           data-line-number="8"
           id="L8" href="#L8">8</a><a class="file-line-num diff-line-num"
           data-line-number="9"
           id="L9" href="#L9">9</a><a class="file-line-num diff-line-num"
           data-line-number="10"
           id="L10" href="#L10">10</a><a class="file-line-num diff-line-num"
           data-line-number="11"
           id="L11" href="#L11">11</a><a class="file-line-num diff-line-num"
           data-line-number="12"
           id="L12" href="#L12">12</a><a class="file-line-num diff-line-num"
           data-line-number="13"
           id="L13" href="#L13">13</a><a class="file-line-num diff-line-num"
           data-line-number="14"
           id="L14" href="#L14">14</a><a class="file-line-num diff-line-num"
           data-line-number="15"
           id="L15" href="#L15">15</a><a class="file-line-num diff-line-num"
           data-line-number="16"
           id="L16" href="#L16">16</a><a class="file-line-num diff-line-num"
           data-line-number="17"
           id="L17" href="#L17">17</a><a class="file-line-num diff-line-num"
           data-line-number="18"
           id="L18" href="#L18">18</a><a class="file-line-num diff-line-num"
           data-line-number="19"
           id="L19" href="#L19">19</a><a class="file-line-num diff-line-num"
           data-line-number="20"
           id="L20" href="#L20">20</a><a class="file-line-num diff-line-num"
           data-line-number="21"
           id="L21" href="#L21">21</a><a class="file-line-num diff-line-num"
           data-line-number="22"
           id="L22" href="#L22">22</a><a class="file-line-num diff-line-num"
           data-line-number="23"
           id="L23" href="#L23">23</a><a class="file-line-num diff-line-num"
           data-line-number="24"
           id="L24" href="#L24">24</a><a class="file-line-num diff-line-num"
           data-line-number="25"
           id="L25" href="#L25">25</a><a class="file-line-num diff-line-num"
           data-line-number="26"
           id="L26" href="#L26">26</a><a class="file-line-num diff-line-num"
           data-line-number="27"
           id="L27" href="#L27">27</a><a class="file-line-num diff-line-num"
           data-line-number="28"
           id="L28" href="#L28">28</a><a class="file-line-num diff-line-num"
           data-line-number="29"
           id="L29" href="#L29">29</a><a class="file-line-num diff-line-num"
           data-line-number="30"
           id="L30" href="#L30">30</a><a class="file-line-num diff-line-num"
           data-line-number="31"
           id="L31" href="#L31">31</a><a class="file-line-num diff-line-num"
           data-line-number="32"
           id="L32" href="#L32">32</a><a class="file-line-num diff-line-num"
           data-line-number="33"
           id="L33" href="#L33">33</a><a class="file-line-num diff-line-num"
           data-line-number="34"
           id="L34" href="#L34">34</a><a class="file-line-num diff-line-num"
           data-line-number="35"
           id="L35" href="#L35">35</a><a class="file-line-num diff-line-num"
           data-line-number="36"
           id="L36" href="#L36">36</a><a class="file-line-num diff-line-num"
           data-line-number="37"
           id="L37" href="#L37">37</a><a class="file-line-num diff-line-num"
           data-line-number="38"
           id="L38" href="#L38">38</a><a class="file-line-num diff-line-num"
           data-line-number="39"
           id="L39" href="#L39">39</a><a class="file-line-num diff-line-num"
           data-line-number="40"
           id="L40" href="#L40">40</a><a class="file-line-num diff-line-num"
           data-line-number="41"
           id="L41" href="#L41">41</a><a class="file-line-num diff-line-num"
           data-line-number="42"
           id="L42" href="#L42">42</a><a class="file-line-num diff-line-num"
           data-line-number="43"
           id="L43" href="#L43">43</a><a class="file-line-num diff-line-num"
           data-line-number="44"
           id="L44" href="#L44">44</a><a class="file-line-num diff-line-num"
           data-line-number="45"
           id="L45" href="#L45">45</a><a class="file-line-num diff-line-num"
           data-line-number="46"
           id="L46" href="#L46">46</a><a class="file-line-num diff-line-num"
           data-line-number="47"
           id="L47" href="#L47">47</a><a class="file-line-num diff-line-num"
           data-line-number="48"
           id="L48" href="#L48">48</a><a class="file-line-num diff-line-num"
           data-line-number="49"
           id="L49" href="#L49">49</a><a class="file-line-num diff-line-num"
           data-line-number="50"
           id="L50" href="#L50">50</a><a class="file-line-num diff-line-num"
           data-line-number="51"
           id="L51" href="#L51">51</a><a class="file-line-num diff-line-num"
           data-line-number="52"
           id="L52" href="#L52">52</a><a class="file-line-num diff-line-num"
           data-line-number="53"
           id="L53" href="#L53">53</a><a class="file-line-num diff-line-num"
           data-line-number="54"
           id="L54" href="#L54">54</a><a class="file-line-num diff-line-num"
           data-line-number="55"
           id="L55" href="#L55">55</a><a class="file-line-num diff-line-num"
           data-line-number="56"
           id="L56" href="#L56">56</a><a class="file-line-num diff-line-num"
           data-line-number="57"
           id="L57" href="#L57">57</a><a class="file-line-num diff-line-num"
           data-line-number="58"
           id="L58" href="#L58">58</a><a class="file-line-num diff-line-num"
           data-line-number="59"
           id="L59" href="#L59">59</a><a class="file-line-num diff-line-num"
           data-line-number="60"
           id="L60" href="#L60">60</a><a class="file-line-num diff-line-num"
           data-line-number="61"
           id="L61" href="#L61">61</a><a class="file-line-num diff-line-num"
           data-line-number="62"
           id="L62" href="#L62">62</a><a class="file-line-num diff-line-num"
           data-line-number="63"
           id="L63" href="#L63">63</a><a class="file-line-num diff-line-num"
           data-line-number="64"
           id="L64" href="#L64">64</a><a class="file-line-num diff-line-num"
           data-line-number="65"
           id="L65" href="#L65">65</a><a class="file-line-num diff-line-num"
           data-line-number="66"
           id="L66" href="#L66">66</a><a class="file-line-num diff-line-num"
           data-line-number="67"
           id="L67" href="#L67">67</a><a class="file-line-num diff-line-num"
           data-line-number="68"
           id="L68" href="#L68">68</a><a class="file-line-num diff-line-num"
           data-line-number="69"
           id="L69" href="#L69">69</a><a class="file-line-num diff-line-num"
           data-line-number="70"
           id="L70" href="#L70">70</a><a class="file-line-num diff-line-num"
           data-line-number="71"
           id="L71" href="#L71">71</a><a class="file-line-num diff-line-num"
           data-line-number="72"
           id="L72" href="#L72">72</a><a class="file-line-num diff-line-num"
           data-line-number="73"
           id="L73" href="#L73">73</a><a class="file-line-num diff-line-num"
           data-line-number="74"
           id="L74" href="#L74">74</a><a class="file-line-num diff-line-num"
           data-line-number="75"
           id="L75" href="#L75">75</a><a class="file-line-num diff-line-num"
           data-line-number="76"
           id="L76" href="#L76">76</a><a class="file-line-num diff-line-num"
           data-line-number="77"
           id="L77" href="#L77">77</a><a class="file-line-num diff-line-num"
           data-line-number="78"
           id="L78" href="#L78">78</a><a class="file-line-num diff-line-num"
           data-line-number="79"
           id="L79" href="#L79">79</a><a class="file-line-num diff-line-num"
           data-line-number="80"
           id="L80" href="#L80">80</a><a class="file-line-num diff-line-num"
           data-line-number="81"
           id="L81" href="#L81">81</a><a class="file-line-num diff-line-num"
           data-line-number="82"
           id="L82" href="#L82">82</a><a class="file-line-num diff-line-num"
           data-line-number="83"
           id="L83" href="#L83">83</a><a class="file-line-num diff-line-num"
           data-line-number="84"
           id="L84" href="#L84">84</a><a class="file-line-num diff-line-num"
           data-line-number="85"
           id="L85" href="#L85">85</a><a class="file-line-num diff-line-num"
           data-line-number="86"
           id="L86" href="#L86">86</a><a class="file-line-num diff-line-num"
           data-line-number="87"
           id="L87" href="#L87">87</a><a class="file-line-num diff-line-num"
           data-line-number="88"
           id="L88" href="#L88">88</a><a class="file-line-num diff-line-num"
           data-line-number="89"
           id="L89" href="#L89">89</a><a class="file-line-num diff-line-num"
           data-line-number="90"
           id="L90" href="#L90">90</a><a class="file-line-num diff-line-num"
           data-line-number="91"
           id="L91" href="#L91">91</a><a class="file-line-num diff-line-num"
           data-line-number="92"
           id="L92" href="#L92">92</a><a class="file-line-num diff-line-num"
           data-line-number="93"
           id="L93" href="#L93">93</a><a class="file-line-num diff-line-num"
           data-line-number="94"
           id="L94" href="#L94">94</a><a class="file-line-num diff-line-num"
           data-line-number="95"
           id="L95" href="#L95">95</a><a class="file-line-num diff-line-num"
           data-line-number="96"
           id="L96" href="#L96">96</a><a class="file-line-num diff-line-num"
           data-line-number="97"
           id="L97" href="#L97">97</a><a class="file-line-num diff-line-num"
           data-line-number="98"
           id="L98" href="#L98">98</a><a class="file-line-num diff-line-num"
           data-line-number="99"
           id="L99" href="#L99">99</a><a class="file-line-num diff-line-num"
           data-line-number="100"
           id="L100" href="#L100">100</a><a class="file-line-num diff-line-num"
           data-line-number="101"
           id="L101" href="#L101">101</a><a class="file-line-num diff-line-num"
           data-line-number="102"
           id="L102" href="#L102">102</a><a class="file-line-num diff-line-num"
           data-line-number="103"
           id="L103" href="#L103">103</a><a class="file-line-num diff-line-num"
           data-line-number="104"
           id="L104" href="#L104">104</a><a class="file-line-num diff-line-num"
           data-line-number="105"
           id="L105" href="#L105">105</a><a class="file-line-num diff-line-num"
           data-line-number="106"
           id="L106" href="#L106">106</a><a class="file-line-num diff-line-num"
           data-line-number="107"
           id="L107" href="#L107">107</a><a class="file-line-num diff-line-num"
           data-line-number="108"
           id="L108" href="#L108">108</a><a class="file-line-num diff-line-num"
           data-line-number="109"
           id="L109" href="#L109">109</a><a class="file-line-num diff-line-num"
           data-line-number="110"
           id="L110" href="#L110">110</a><a class="file-line-num diff-line-num"
           data-line-number="111"
           id="L111" href="#L111">111</a><a class="file-line-num diff-line-num"
           data-line-number="112"
           id="L112" href="#L112">112</a><a class="file-line-num diff-line-num"
           data-line-number="113"
           id="L113" href="#L113">113</a><a class="file-line-num diff-line-num"
           data-line-number="114"
           id="L114" href="#L114">114</a><a class="file-line-num diff-line-num"
           data-line-number="115"
           id="L115" href="#L115">115</a><a class="file-line-num diff-line-num"
           data-line-number="116"
           id="L116" href="#L116">116</a><a class="file-line-num diff-line-num"
           data-line-number="117"
           id="L117" href="#L117">117</a><a class="file-line-num diff-line-num"
           data-line-number="118"
           id="L118" href="#L118">118</a><a class="file-line-num diff-line-num"
           data-line-number="119"
           id="L119" href="#L119">119</a><a class="file-line-num diff-line-num"
           data-line-number="120"
           id="L120" href="#L120">120</a><a class="file-line-num diff-line-num"
           data-line-number="121"
           id="L121" href="#L121">121</a><a class="file-line-num diff-line-num"
           data-line-number="122"
           id="L122" href="#L122">122</a><a class="file-line-num diff-line-num"
           data-line-number="123"
           id="L123" href="#L123">123</a><a class="file-line-num diff-line-num"
           data-line-number="124"
           id="L124" href="#L124">124</a><a class="file-line-num diff-line-num"
           data-line-number="125"
           id="L125" href="#L125">125</a><a class="file-line-num diff-line-num"
           data-line-number="126"
           id="L126" href="#L126">126</a><a class="file-line-num diff-line-num"
           data-line-number="127"
           id="L127" href="#L127">127</a><a class="file-line-num diff-line-num"
           data-line-number="128"
           id="L128" href="#L128">128</a><a class="file-line-num diff-line-num"
           data-line-number="129"
           id="L129" href="#L129">129</a><a class="file-line-num diff-line-num"
           data-line-number="130"
           id="L130" href="#L130">130</a><a class="file-line-num diff-line-num"
           data-line-number="131"
           id="L131" href="#L131">131</a><a class="file-line-num diff-line-num"
           data-line-number="132"
           id="L132" href="#L132">132</a><a class="file-line-num diff-line-num"
           data-line-number="133"
           id="L133" href="#L133">133</a><a class="file-line-num diff-line-num"
           data-line-number="134"
           id="L134" href="#L134">134</a><a class="file-line-num diff-line-num"
           data-line-number="135"
           id="L135" href="#L135">135</a><a class="file-line-num diff-line-num"
           data-line-number="136"
           id="L136" href="#L136">136</a><a class="file-line-num diff-line-num"
           data-line-number="137"
           id="L137" href="#L137">137</a><a class="file-line-num diff-line-num"
           data-line-number="138"
           id="L138" href="#L138">138</a><a class="file-line-num diff-line-num"
           data-line-number="139"
           id="L139" href="#L139">139</a><a class="file-line-num diff-line-num"
           data-line-number="140"
           id="L140" href="#L140">140</a><a class="file-line-num diff-line-num"
           data-line-number="141"
           id="L141" href="#L141">141</a><a class="file-line-num diff-line-num"
           data-line-number="142"
           id="L142" href="#L142">142</a><a class="file-line-num diff-line-num"
           data-line-number="143"
           id="L143" href="#L143">143</a><a class="file-line-num diff-line-num"
           data-line-number="144"
           id="L144" href="#L144">144</a><a class="file-line-num diff-line-num"
           data-line-number="145"
           id="L145" href="#L145">145</a><a class="file-line-num diff-line-num"
           data-line-number="146"
           id="L146" href="#L146">146</a><a class="file-line-num diff-line-num"
           data-line-number="147"
           id="L147" href="#L147">147</a><a class="file-line-num diff-line-num"
           data-line-number="148"
           id="L148" href="#L148">148</a><a class="file-line-num diff-line-num"
           data-line-number="149"
           id="L149" href="#L149">149</a><a class="file-line-num diff-line-num"
           data-line-number="150"
           id="L150" href="#L150">150</a><a class="file-line-num diff-line-num"
           data-line-number="151"
           id="L151" href="#L151">151</a><a class="file-line-num diff-line-num"
           data-line-number="152"
           id="L152" href="#L152">152</a><a class="file-line-num diff-line-num"
           data-line-number="153"
           id="L153" href="#L153">153</a><a class="file-line-num diff-line-num"
           data-line-number="154"
           id="L154" href="#L154">154</a><a class="file-line-num diff-line-num"
           data-line-number="155"
           id="L155" href="#L155">155</a><a class="file-line-num diff-line-num"
           data-line-number="156"
           id="L156" href="#L156">156</a><a class="file-line-num diff-line-num"
           data-line-number="157"
           id="L157" href="#L157">157</a><a class="file-line-num diff-line-num"
           data-line-number="158"
           id="L158" href="#L158">158</a><a class="file-line-num diff-line-num"
           data-line-number="159"
           id="L159" href="#L159">159</a><a class="file-line-num diff-line-num"
           data-line-number="160"
           id="L160" href="#L160">160</a><a class="file-line-num diff-line-num"
           data-line-number="161"
           id="L161" href="#L161">161</a><a class="file-line-num diff-line-num"
           data-line-number="162"
           id="L162" href="#L162">162</a><a class="file-line-num diff-line-num"
           data-line-number="163"
           id="L163" href="#L163">163</a><a class="file-line-num diff-line-num"
           data-line-number="164"
           id="L164" href="#L164">164</a><a class="file-line-num diff-line-num"
           data-line-number="165"
           id="L165" href="#L165">165</a><a class="file-line-num diff-line-num"
           data-line-number="166"
           id="L166" href="#L166">166</a><a class="file-line-num diff-line-num"
           data-line-number="167"
           id="L167" href="#L167">167</a><a class="file-line-num diff-line-num"
           data-line-number="168"
           id="L168" href="#L168">168</a><a class="file-line-num diff-line-num"
           data-line-number="169"
           id="L169" href="#L169">169</a><a class="file-line-num diff-line-num"
           data-line-number="170"
           id="L170" href="#L170">170</a><a class="file-line-num diff-line-num"
           data-line-number="171"
           id="L171" href="#L171">171</a><a class="file-line-num diff-line-num"
           data-line-number="172"
           id="L172" href="#L172">172</a><a class="file-line-num diff-line-num"
           data-line-number="173"
           id="L173" href="#L173">173</a><a class="file-line-num diff-line-num"
           data-line-number="174"
           id="L174" href="#L174">174</a><a class="file-line-num diff-line-num"
           data-line-number="175"
           id="L175" href="#L175">175</a><a class="file-line-num diff-line-num"
           data-line-number="176"
           id="L176" href="#L176">176</a><a class="file-line-num diff-line-num"
           data-line-number="177"
           id="L177" href="#L177">177</a><a class="file-line-num diff-line-num"
           data-line-number="178"
           id="L178" href="#L178">178</a><a class="file-line-num diff-line-num"
           data-line-number="179"
           id="L179" href="#L179">179</a><a class="file-line-num diff-line-num"
           data-line-number="180"
           id="L180" href="#L180">180</a><a class="file-line-num diff-line-num"
           data-line-number="181"
           id="L181" href="#L181">181</a><a class="file-line-num diff-line-num"
           data-line-number="182"
           id="L182" href="#L182">182</a><a class="file-line-num diff-line-num"
           data-line-number="183"
           id="L183" href="#L183">183</a><a class="file-line-num diff-line-num"
           data-line-number="184"
           id="L184" href="#L184">184</a><a class="file-line-num diff-line-num"
           data-line-number="185"
           id="L185" href="#L185">185</a><a class="file-line-num diff-line-num"
           data-line-number="186"
           id="L186" href="#L186">186</a><a class="file-line-num diff-line-num"
           data-line-number="187"
           id="L187" href="#L187">187</a><a class="file-line-num diff-line-num"
           data-line-number="188"
           id="L188" href="#L188">188</a><a class="file-line-num diff-line-num"
           data-line-number="189"
           id="L189" href="#L189">189</a><a class="file-line-num diff-line-num"
           data-line-number="190"
           id="L190" href="#L190">190</a><a class="file-line-num diff-line-num"
           data-line-number="191"
           id="L191" href="#L191">191</a><a class="file-line-num diff-line-num"
           data-line-number="192"
           id="L192" href="#L192">192</a><a class="file-line-num diff-line-num"
           data-line-number="193"
           id="L193" href="#L193">193</a><a class="file-line-num diff-line-num"
           data-line-number="194"
           id="L194" href="#L194">194</a><a class="file-line-num diff-line-num"
           data-line-number="195"
           id="L195" href="#L195">195</a><a class="file-line-num diff-line-num"
           data-line-number="196"
           id="L196" href="#L196">196</a><a class="file-line-num diff-line-num"
           data-line-number="197"
           id="L197" href="#L197">197</a><a class="file-line-num diff-line-num"
           data-line-number="198"
           id="L198" href="#L198">198</a><a class="file-line-num diff-line-num"
           data-line-number="199"
           id="L199" href="#L199">199</a><a class="file-line-num diff-line-num"
           data-line-number="200"
           id="L200" href="#L200">200</a><a class="file-line-num diff-line-num"
           data-line-number="201"
           id="L201" href="#L201">201</a><a class="file-line-num diff-line-num"
           data-line-number="202"
           id="L202" href="#L202">202</a><a class="file-line-num diff-line-num"
           data-line-number="203"
           id="L203" href="#L203">203</a><a class="file-line-num diff-line-num"
           data-line-number="204"
           id="L204" href="#L204">204</a><a class="file-line-num diff-line-num"
           data-line-number="205"
           id="L205" href="#L205">205</a><a class="file-line-num diff-line-num"
           data-line-number="206"
           id="L206" href="#L206">206</a><a class="file-line-num diff-line-num"
           data-line-number="207"
           id="L207" href="#L207">207</a><a class="file-line-num diff-line-num"
           data-line-number="208"
           id="L208" href="#L208">208</a><a class="file-line-num diff-line-num"
           data-line-number="209"
           id="L209" href="#L209">209</a><a class="file-line-num diff-line-num"
           data-line-number="210"
           id="L210" href="#L210">210</a><a class="file-line-num diff-line-num"
           data-line-number="211"
           id="L211" href="#L211">211</a><a class="file-line-num diff-line-num"
           data-line-number="212"
           id="L212" href="#L212">212</a><a class="file-line-num diff-line-num"
           data-line-number="213"
           id="L213" href="#L213">213</a><a class="file-line-num diff-line-num"
           data-line-number="214"
           id="L214" href="#L214">214</a><a class="file-line-num diff-line-num"
           data-line-number="215"
           id="L215" href="#L215">215</a><a class="file-line-num diff-line-num"
           data-line-number="216"
           id="L216" href="#L216">216</a><a class="file-line-num diff-line-num"
           data-line-number="217"
           id="L217" href="#L217">217</a><a class="file-line-num diff-line-num"
           data-line-number="218"
           id="L218" href="#L218">218</a><a class="file-line-num diff-line-num"
           data-line-number="219"
           id="L219" href="#L219">219</a><a class="file-line-num diff-line-num"
           data-line-number="220"
           id="L220" href="#L220">220</a><a class="file-line-num diff-line-num"
           data-line-number="221"
           id="L221" href="#L221">221</a><a class="file-line-num diff-line-num"
           data-line-number="222"
           id="L222" href="#L222">222</a><a class="file-line-num diff-line-num"
           data-line-number="223"
           id="L223" href="#L223">223</a><a class="file-line-num diff-line-num"
           data-line-number="224"
           id="L224" href="#L224">224</a><a class="file-line-num diff-line-num"
           data-line-number="225"
           id="L225" href="#L225">225</a><a class="file-line-num diff-line-num"
           data-line-number="226"
           id="L226" href="#L226">226</a><a class="file-line-num diff-line-num"
           data-line-number="227"
           id="L227" href="#L227">227</a><a class="file-line-num diff-line-num"
           data-line-number="228"
           id="L228" href="#L228">228</a><a class="file-line-num diff-line-num"
           data-line-number="229"
           id="L229" href="#L229">229</a><a class="file-line-num diff-line-num"
           data-line-number="230"
           id="L230" href="#L230">230</a><a class="file-line-num diff-line-num"
           data-line-number="231"
           id="L231" href="#L231">231</a><a class="file-line-num diff-line-num"
           data-line-number="232"
           id="L232" href="#L232">232</a><a class="file-line-num diff-line-num"
           data-line-number="233"
           id="L233" href="#L233">233</a><a class="file-line-num diff-line-num"
           data-line-number="234"
           id="L234" href="#L234">234</a><a class="file-line-num diff-line-num"
           data-line-number="235"
           id="L235" href="#L235">235</a><a class="file-line-num diff-line-num"
           data-line-number="236"
           id="L236" href="#L236">236</a><a class="file-line-num diff-line-num"
           data-line-number="237"
           id="L237" href="#L237">237</a><a class="file-line-num diff-line-num"
           data-line-number="238"
           id="L238" href="#L238">238</a><a class="file-line-num diff-line-num"
           data-line-number="239"
           id="L239" href="#L239">239</a><a class="file-line-num diff-line-num"
           data-line-number="240"
           id="L240" href="#L240">240</a><a class="file-line-num diff-line-num"
           data-line-number="241"
           id="L241" href="#L241">241</a><a class="file-line-num diff-line-num"
           data-line-number="242"
           id="L242" href="#L242">242</a><a class="file-line-num diff-line-num"
           data-line-number="243"
           id="L243" href="#L243">243</a><a class="file-line-num diff-line-num"
           data-line-number="244"
           id="L244" href="#L244">244</a><a class="file-line-num diff-line-num"
           data-line-number="245"
           id="L245" href="#L245">245</a><a class="file-line-num diff-line-num"
           data-line-number="246"
           id="L246" href="#L246">246</a><a class="file-line-num diff-line-num"
           data-line-number="247"
           id="L247" href="#L247">247</a><a class="file-line-num diff-line-num"
           data-line-number="248"
           id="L248" href="#L248">248</a><a class="file-line-num diff-line-num"
           data-line-number="249"
           id="L249" href="#L249">249</a><a class="file-line-num diff-line-num"
           data-line-number="250"
           id="L250" href="#L250">250</a><a class="file-line-num diff-line-num"
           data-line-number="251"
           id="L251" href="#L251">251</a><a class="file-line-num diff-line-num"
           data-line-number="252"
           id="L252" href="#L252">252</a><a class="file-line-num diff-line-num"
           data-line-number="253"
           id="L253" href="#L253">253</a><a class="file-line-num diff-line-num"
           data-line-number="254"
           id="L254" href="#L254">254</a><a class="file-line-num diff-line-num"
           data-line-number="255"
           id="L255" href="#L255">255</a><a class="file-line-num diff-line-num"
           data-line-number="256"
           id="L256" href="#L256">256</a><a class="file-line-num diff-line-num"
           data-line-number="257"
           id="L257" href="#L257">257</a><a class="file-line-num diff-line-num"
           data-line-number="258"
           id="L258" href="#L258">258</a><a class="file-line-num diff-line-num"
           data-line-number="259"
           id="L259" href="#L259">259</a><a class="file-line-num diff-line-num"
           data-line-number="260"
           id="L260" href="#L260">260</a><a class="file-line-num diff-line-num"
           data-line-number="261"
           id="L261" href="#L261">261</a><a class="file-line-num diff-line-num"
           data-line-number="262"
           id="L262" href="#L262">262</a><a class="file-line-num diff-line-num"
           data-line-number="263"
           id="L263" href="#L263">263</a><a class="file-line-num diff-line-num"
           data-line-number="264"
           id="L264" href="#L264">264</a><a class="file-line-num diff-line-num"
           data-line-number="265"
           id="L265" href="#L265">265</a><a class="file-line-num diff-line-num"
           data-line-number="266"
           id="L266" href="#L266">266</a><a class="file-line-num diff-line-num"
           data-line-number="267"
           id="L267" href="#L267">267</a><a class="file-line-num diff-line-num"
           data-line-number="268"
           id="L268" href="#L268">268</a><a class="file-line-num diff-line-num"
           data-line-number="269"
           id="L269" href="#L269">269</a><a class="file-line-num diff-line-num"
           data-line-number="270"
           id="L270" href="#L270">270</a><a class="file-line-num diff-line-num"
           data-line-number="271"
           id="L271" href="#L271">271</a><a class="file-line-num diff-line-num"
           data-line-number="272"
           id="L272" href="#L272">272</a><a class="file-line-num diff-line-num"
           data-line-number="273"
           id="L273" href="#L273">273</a><a class="file-line-num diff-line-num"
           data-line-number="274"
           id="L274" href="#L274">274</a><a class="file-line-num diff-line-num"
           data-line-number="275"
           id="L275" href="#L275">275</a><a class="file-line-num diff-line-num"
           data-line-number="276"
           id="L276" href="#L276">276</a><a class="file-line-num diff-line-num"
           data-line-number="277"
           id="L277" href="#L277">277</a><a class="file-line-num diff-line-num"
           data-line-number="278"
           id="L278" href="#L278">278</a><a class="file-line-num diff-line-num"
           data-line-number="279"
           id="L279" href="#L279">279</a><a class="file-line-num diff-line-num"
           data-line-number="280"
           id="L280" href="#L280">280</a><a class="file-line-num diff-line-num"
           data-line-number="281"
           id="L281" href="#L281">281</a><a class="file-line-num diff-line-num"
           data-line-number="282"
           id="L282" href="#L282">282</a><a class="file-line-num diff-line-num"
           data-line-number="283"
           id="L283" href="#L283">283</a><a class="file-line-num diff-line-num"
           data-line-number="284"
           id="L284" href="#L284">284</a><a class="file-line-num diff-line-num"
           data-line-number="285"
           id="L285" href="#L285">285</a><a class="file-line-num diff-line-num"
           data-line-number="286"
           id="L286" href="#L286">286</a><a class="file-line-num diff-line-num"
           data-line-number="287"
           id="L287" href="#L287">287</a><a class="file-line-num diff-line-num"
           data-line-number="288"
           id="L288" href="#L288">288</a><a class="file-line-num diff-line-num"
           data-line-number="289"
           id="L289" href="#L289">289</a><a class="file-line-num diff-line-num"
           data-line-number="290"
           id="L290" href="#L290">290</a><a class="file-line-num diff-line-num"
           data-line-number="291"
           id="L291" href="#L291">291</a><a class="file-line-num diff-line-num"
           data-line-number="292"
           id="L292" href="#L292">292</a><a class="file-line-num diff-line-num"
           data-line-number="293"
           id="L293" href="#L293">293</a><a class="file-line-num diff-line-num"
           data-line-number="294"
           id="L294" href="#L294">294</a><a class="file-line-num diff-line-num"
           data-line-number="295"
           id="L295" href="#L295">295</a><a class="file-line-num diff-line-num"
           data-line-number="296"
           id="L296" href="#L296">296</a><a class="file-line-num diff-line-num"
           data-line-number="297"
           id="L297" href="#L297">297</a><a class="file-line-num diff-line-num"
           data-line-number="298"
           id="L298" href="#L298">298</a><a class="file-line-num diff-line-num"
           data-line-number="299"
           id="L299" href="#L299">299</a><a class="file-line-num diff-line-num"
           data-line-number="300"
           id="L300" href="#L300">300</a><a class="file-line-num diff-line-num"
           data-line-number="301"
           id="L301" href="#L301">301</a><a class="file-line-num diff-line-num"
           data-line-number="302"
           id="L302" href="#L302">302</a><a class="file-line-num diff-line-num"
           data-line-number="303"
           id="L303" href="#L303">303</a><a class="file-line-num diff-line-num"
           data-line-number="304"
           id="L304" href="#L304">304</a><a class="file-line-num diff-line-num"
           data-line-number="305"
           id="L305" href="#L305">305</a><a class="file-line-num diff-line-num"
           data-line-number="306"
           id="L306" href="#L306">306</a><a class="file-line-num diff-line-num"
           data-line-number="307"
           id="L307" href="#L307">307</a><a class="file-line-num diff-line-num"
           data-line-number="308"
           id="L308" href="#L308">308</a><a class="file-line-num diff-line-num"
           data-line-number="309"
           id="L309" href="#L309">309</a><a class="file-line-num diff-line-num"
           data-line-number="310"
           id="L310" href="#L310">310</a><a class="file-line-num diff-line-num"
           data-line-number="311"
           id="L311" href="#L311">311</a><a class="file-line-num diff-line-num"
           data-line-number="312"
           id="L312" href="#L312">312</a><a class="file-line-num diff-line-num"
           data-line-number="313"
           id="L313" href="#L313">313</a><a class="file-line-num diff-line-num"
           data-line-number="314"
           id="L314" href="#L314">314</a><a class="file-line-num diff-line-num"
           data-line-number="315"
           id="L315" href="#L315">315</a><a class="file-line-num diff-line-num"
           data-line-number="316"
           id="L316" href="#L316">316</a><a class="file-line-num diff-line-num"
           data-line-number="317"
           id="L317" href="#L317">317</a><a class="file-line-num diff-line-num"
           data-line-number="318"
           id="L318" href="#L318">318</a><a class="file-line-num diff-line-num"
           data-line-number="319"
           id="L319" href="#L319">319</a><a class="file-line-num diff-line-num"
           data-line-number="320"
           id="L320" href="#L320">320</a><a class="file-line-num diff-line-num"
           data-line-number="321"
           id="L321" href="#L321">321</a><a class="file-line-num diff-line-num"
           data-line-number="322"
           id="L322" href="#L322">322</a><a class="file-line-num diff-line-num"
           data-line-number="323"
           id="L323" href="#L323">323</a><a class="file-line-num diff-line-num"
           data-line-number="324"
           id="L324" href="#L324">324</a><a class="file-line-num diff-line-num"
           data-line-number="325"
           id="L325" href="#L325">325</a><a class="file-line-num diff-line-num"
           data-line-number="326"
           id="L326" href="#L326">326</a><a class="file-line-num diff-line-num"
           data-line-number="327"
           id="L327" href="#L327">327</a><a class="file-line-num diff-line-num"
           data-line-number="328"
           id="L328" href="#L328">328</a><a class="file-line-num diff-line-num"
           data-line-number="329"
           id="L329" href="#L329">329</a><a class="file-line-num diff-line-num"
           data-line-number="330"
           id="L330" href="#L330">330</a><a class="file-line-num diff-line-num"
           data-line-number="331"
           id="L331" href="#L331">331</a><a class="file-line-num diff-line-num"
           data-line-number="332"
           id="L332" href="#L332">332</a><a class="file-line-num diff-line-num"
           data-line-number="333"
           id="L333" href="#L333">333</a><a class="file-line-num diff-line-num"
           data-line-number="334"
           id="L334" href="#L334">334</a><a class="file-line-num diff-line-num"
           data-line-number="335"
           id="L335" href="#L335">335</a><a class="file-line-num diff-line-num"
           data-line-number="336"
           id="L336" href="#L336">336</a><a class="file-line-num diff-line-num"
           data-line-number="337"
           id="L337" href="#L337">337</a><a class="file-line-num diff-line-num"
           data-line-number="338"
           id="L338" href="#L338">338</a><a class="file-line-num diff-line-num"
           data-line-number="339"
           id="L339" href="#L339">339</a><a class="file-line-num diff-line-num"
           data-line-number="340"
           id="L340" href="#L340">340</a><a class="file-line-num diff-line-num"
           data-line-number="341"
           id="L341" href="#L341">341</a><a class="file-line-num diff-line-num"
           data-line-number="342"
           id="L342" href="#L342">342</a><a class="file-line-num diff-line-num"
           data-line-number="343"
           id="L343" href="#L343">343</a><a class="file-line-num diff-line-num"
           data-line-number="344"
           id="L344" href="#L344">344</a><a class="file-line-num diff-line-num"
           data-line-number="345"
           id="L345" href="#L345">345</a><a class="file-line-num diff-line-num"
           data-line-number="346"
           id="L346" href="#L346">346</a><a class="file-line-num diff-line-num"
           data-line-number="347"
           id="L347" href="#L347">347</a><a class="file-line-num diff-line-num"
           data-line-number="348"
           id="L348" href="#L348">348</a><a class="file-line-num diff-line-num"
           data-line-number="349"
           id="L349" href="#L349">349</a><a class="file-line-num diff-line-num"
           data-line-number="350"
           id="L350" href="#L350">350</a><a class="file-line-num diff-line-num"
           data-line-number="351"
           id="L351" href="#L351">351</a><a class="file-line-num diff-line-num"
           data-line-number="352"
           id="L352" href="#L352">352</a><a class="file-line-num diff-line-num"
           data-line-number="353"
           id="L353" href="#L353">353</a><a class="file-line-num diff-line-num"
           data-line-number="354"
           id="L354" href="#L354">354</a><a class="file-line-num diff-line-num"
           data-line-number="355"
           id="L355" href="#L355">355</a><a class="file-line-num diff-line-num"
           data-line-number="356"
           id="L356" href="#L356">356</a><a class="file-line-num diff-line-num"
           data-line-number="357"
           id="L357" href="#L357">357</a><a class="file-line-num diff-line-num"
           data-line-number="358"
           id="L358" href="#L358">358</a><a class="file-line-num diff-line-num"
           data-line-number="359"
           id="L359" href="#L359">359</a><a class="file-line-num diff-line-num"
           data-line-number="360"
           id="L360" href="#L360">360</a><a class="file-line-num diff-line-num"
           data-line-number="361"
           id="L361" href="#L361">361</a><a class="file-line-num diff-line-num"
           data-line-number="362"
           id="L362" href="#L362">362</a><a class="file-line-num diff-line-num"
           data-line-number="363"
           id="L363" href="#L363">363</a><a class="file-line-num diff-line-num"
           data-line-number="364"
           id="L364" href="#L364">364</a><a class="file-line-num diff-line-num"
           data-line-number="365"
           id="L365" href="#L365">365</a><a class="file-line-num diff-line-num"
           data-line-number="366"
           id="L366" href="#L366">366</a><a class="file-line-num diff-line-num"
           data-line-number="367"
           id="L367" href="#L367">367</a><a class="file-line-num diff-line-num"
           data-line-number="368"
           id="L368" href="#L368">368</a><a class="file-line-num diff-line-num"
           data-line-number="369"
           id="L369" href="#L369">369</a><a class="file-line-num diff-line-num"
           data-line-number="370"
           id="L370" href="#L370">370</a><a class="file-line-num diff-line-num"
           data-line-number="371"
           id="L371" href="#L371">371</a><a class="file-line-num diff-line-num"
           data-line-number="372"
           id="L372" href="#L372">372</a><a class="file-line-num diff-line-num"
           data-line-number="373"
           id="L373" href="#L373">373</a><a class="file-line-num diff-line-num"
           data-line-number="374"
           id="L374" href="#L374">374</a><a class="file-line-num diff-line-num"
           data-line-number="375"
           id="L375" href="#L375">375</a><a class="file-line-num diff-line-num"
           data-line-number="376"
           id="L376" href="#L376">376</a><a class="file-line-num diff-line-num"
           data-line-number="377"
           id="L377" href="#L377">377</a><a class="file-line-num diff-line-num"
           data-line-number="378"
           id="L378" href="#L378">378</a><a class="file-line-num diff-line-num"
           data-line-number="379"
           id="L379" href="#L379">379</a><a class="file-line-num diff-line-num"
           data-line-number="380"
           id="L380" href="#L380">380</a><a class="file-line-num diff-line-num"
           data-line-number="381"
           id="L381" href="#L381">381</a><a class="file-line-num diff-line-num"
           data-line-number="382"
           id="L382" href="#L382">382</a><a class="file-line-num diff-line-num"
           data-line-number="383"
           id="L383" href="#L383">383</a><a class="file-line-num diff-line-num"
           data-line-number="384"
           id="L384" href="#L384">384</a><a class="file-line-num diff-line-num"
           data-line-number="385"
           id="L385" href="#L385">385</a><a class="file-line-num diff-line-num"
           data-line-number="386"
           id="L386" href="#L386">386</a><a class="file-line-num diff-line-num"
           data-line-number="387"
           id="L387" href="#L387">387</a><a class="file-line-num diff-line-num"
           data-line-number="388"
           id="L388" href="#L388">388</a><a class="file-line-num diff-line-num"
           data-line-number="389"
           id="L389" href="#L389">389</a><a class="file-line-num diff-line-num"
           data-line-number="390"
           id="L390" href="#L390">390</a><a class="file-line-num diff-line-num"
           data-line-number="391"
           id="L391" href="#L391">391</a><a class="file-line-num diff-line-num"
           data-line-number="392"
           id="L392" href="#L392">392</a><a class="file-line-num diff-line-num"
           data-line-number="393"
           id="L393" href="#L393">393</a><a class="file-line-num diff-line-num"
           data-line-number="394"
           id="L394" href="#L394">394</a><a class="file-line-num diff-line-num"
           data-line-number="395"
           id="L395" href="#L395">395</a><a class="file-line-num diff-line-num"
           data-line-number="396"
           id="L396" href="#L396">396</a><a class="file-line-num diff-line-num"
           data-line-number="397"
           id="L397" href="#L397">397</a><a class="file-line-num diff-line-num"
           data-line-number="398"
           id="L398" href="#L398">398</a><a class="file-line-num diff-line-num"
           data-line-number="399"
           id="L399" href="#L399">399</a><a class="file-line-num diff-line-num"
           data-line-number="400"
           id="L400" href="#L400">400</a><a class="file-line-num diff-line-num"
           data-line-number="401"
           id="L401" href="#L401">401</a><a class="file-line-num diff-line-num"
           data-line-number="402"
           id="L402" href="#L402">402</a><a class="file-line-num diff-line-num"
           data-line-number="403"
           id="L403" href="#L403">403</a><a class="file-line-num diff-line-num"
           data-line-number="404"
           id="L404" href="#L404">404</a><a class="file-line-num diff-line-num"
           data-line-number="405"
           id="L405" href="#L405">405</a><a class="file-line-num diff-line-num"
           data-line-number="406"
           id="L406" href="#L406">406</a><a class="file-line-num diff-line-num"
           data-line-number="407"
           id="L407" href="#L407">407</a><a class="file-line-num diff-line-num"
           data-line-number="408"
           id="L408" href="#L408">408</a><a class="file-line-num diff-line-num"
           data-line-number="409"
           id="L409" href="#L409">409</a><a class="file-line-num diff-line-num"
           data-line-number="410"
           id="L410" href="#L410">410</a><a class="file-line-num diff-line-num"
           data-line-number="411"
           id="L411" href="#L411">411</a><a class="file-line-num diff-line-num"
           data-line-number="412"
           id="L412" href="#L412">412</a><a class="file-line-num diff-line-num"
           data-line-number="413"
           id="L413" href="#L413">413</a><a class="file-line-num diff-line-num"
           data-line-number="414"
           id="L414" href="#L414">414</a><a class="file-line-num diff-line-num"
           data-line-number="415"
           id="L415" href="#L415">415</a><a class="file-line-num diff-line-num"
           data-line-number="416"
           id="L416" href="#L416">416</a><a class="file-line-num diff-line-num"
           data-line-number="417"
           id="L417" href="#L417">417</a><a class="file-line-num diff-line-num"
           data-line-number="418"
           id="L418" href="#L418">418</a><a class="file-line-num diff-line-num"
           data-line-number="419"
           id="L419" href="#L419">419</a><a class="file-line-num diff-line-num"
           data-line-number="420"
           id="L420" href="#L420">420</a><a class="file-line-num diff-line-num"
           data-line-number="421"
           id="L421" href="#L421">421</a><a class="file-line-num diff-line-num"
           data-line-number="422"
           id="L422" href="#L422">422</a><a class="file-line-num diff-line-num"
           data-line-number="423"
           id="L423" href="#L423">423</a><a class="file-line-num diff-line-num"
           data-line-number="424"
           id="L424" href="#L424">424</a><a class="file-line-num diff-line-num"
           data-line-number="425"
           id="L425" href="#L425">425</a><a class="file-line-num diff-line-num"
           data-line-number="426"
           id="L426" href="#L426">426</a><a class="file-line-num diff-line-num"
           data-line-number="427"
           id="L427" href="#L427">427</a><a class="file-line-num diff-line-num"
           data-line-number="428"
           id="L428" href="#L428">428</a><a class="file-line-num diff-line-num"
           data-line-number="429"
           id="L429" href="#L429">429</a><a class="file-line-num diff-line-num"
           data-line-number="430"
           id="L430" href="#L430">430</a><a class="file-line-num diff-line-num"
           data-line-number="431"
           id="L431" href="#L431">431</a><a class="file-line-num diff-line-num"
           data-line-number="432"
           id="L432" href="#L432">432</a><a class="file-line-num diff-line-num"
           data-line-number="433"
           id="L433" href="#L433">433</a><a class="file-line-num diff-line-num"
           data-line-number="434"
           id="L434" href="#L434">434</a><a class="file-line-num diff-line-num"
           data-line-number="435"
           id="L435" href="#L435">435</a><a class="file-line-num diff-line-num"
           data-line-number="436"
           id="L436" href="#L436">436</a>
    </div>
    <div class="blob-content"
         data-blob-id="5afbd23d0e021a57af5234311b7287d5ca25c727"
         data-path="src/main/java/main/repo/EmployeeRepo.java"
         data-qa-selector="file_content">
<pre class="code highlight">
<code>
<span class="line" lang="java" id="LC1"><span class="cm">/*</span></span><span class="line" lang="java" id="LC2"><span class="cm"> * Licensed to the Apache Software Foundation (ASF) under one or more</span></span><span class="line" lang="java" id="LC3"><span class="cm"> * contributor license agreements.  See the NOTICE file distributed with</span></span><span class="line" lang="java" id="LC4"><span class="cm"> * this work for additional information regarding copyright ownership.</span></span><span class="line" lang="java" id="LC5"><span class="cm"> * The ASF licenses this file to You under the Apache License, Version 2.0</span></span><span class="line" lang="java" id="LC6"><span class="cm"> * (the &quot;License&quot;); you may not use this file except in compliance with</span></span><span class="line" lang="java" id="LC7"><span class="cm"> * the License.  You may obtain a copy of the License at</span></span><span class="line" lang="java" id="LC8"><span class="cm"> *</span></span><span class="line" lang="java" id="LC9"><span class="cm"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><span class="line" lang="java" id="LC10"><span class="cm"> *</span></span><span class="line" lang="java" id="LC11"><span class="cm"> * Unless required by applicable law or agreed to in writing, software</span></span><span class="line" lang="java" id="LC12"><span class="cm"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><span class="line" lang="java" id="LC13"><span class="cm"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><span class="line" lang="java" id="LC14"><span class="cm"> * See the License for the specific language governing permissions and</span></span><span class="line" lang="java" id="LC15"><span class="cm"> * limitations under the License.</span></span><span class="line" lang="java" id="LC16"><span class="cm"> */</span></span><span class="line" lang="java" id="LC17"><span class="cm">/**</span></span><span class="line" lang="java" id="LC18"><span class="cm"> * &lt;p&gt;Provides support classes for multi-threaded programming.</span></span><span class="line" lang="java" id="LC19"><span class="cm"> * This package is intended to be an extension to {@link java.util.concurrent}.</span></span><span class="line" lang="java" id="LC20"><span class="cm"> * These classes are thread-safe.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC21"><span class="cm"> *</span></span><span class="line" lang="java" id="LC22"><span class="cm"> * &lt;p&gt; A group of classes deals with the correct creation and initialization of objects that are accessed by multiple threads.</span></span><span class="line" lang="java" id="LC23"><span class="cm"> * All these classes implement the {@link org.apache.commons.lang3.concurrent.ConcurrentInitializer} interface which provides just a</span></span><span class="line" lang="java" id="LC24"><span class="cm"> * single method:</span></span><span class="line" lang="java" id="LC25"><span class="cm"> * &lt;/p&gt;</span></span><span class="line" lang="java" id="LC26"><span class="cm"> *</span></span><span class="line" lang="java" id="LC27"><span class="cm"> * &lt;pre&gt;</span></span><span class="line" lang="java" id="LC28"><span class="cm"> * &lt;code&gt;</span></span><span class="line" lang="java" id="LC29"><span class="cm"> * public interface ConcurrentInitializer&amp;lt;T&amp;gt; {</span></span><span class="line" lang="java" id="LC30"><span class="cm"> *    T get() throws ConcurrentException;</span></span><span class="line" lang="java" id="LC31"><span class="cm"> * }</span></span><span class="line" lang="java" id="LC32"><span class="cm"> * &lt;/code&gt;</span></span><span class="line" lang="java" id="LC33"><span class="cm"> * &lt;/pre&gt;</span></span><span class="line" lang="java" id="LC34"><span class="cm"> *</span></span><span class="line" lang="java" id="LC35"><span class="cm"> * &lt;p&gt;A {@code ConcurrentInitializer} produces an object.</span></span><span class="line" lang="java" id="LC36"><span class="cm"> * By calling the {@link org.apache.commons.lang3.concurrent.ConcurrentInitializer#get() get()} method the object managed by the initializer can be obtained.</span></span><span class="line" lang="java" id="LC37"><span class="cm"> * There are different implementations of the interface available</span></span><span class="line" lang="java" id="LC38"><span class="cm"> * addressing various use cases:</span></span><span class="line" lang="java" id="LC39"><span class="cm"> * &lt;/p&gt;</span></span><span class="line" lang="java" id="LC40"><span class="cm"> *</span></span><span class="line" lang="java" id="LC41"><span class="cm"> * &lt;p&gt; {@link org.apache.commons.lang3.concurrent.ConstantInitializer} is a very straightforward implementation of the {@code ConcurrentInitializer} interface:</span></span><span class="line" lang="java" id="LC42"><span class="cm"> * An instance is passed an object when it is constructed.</span></span><span class="line" lang="java" id="LC43"><span class="cm"> * In its {@code get()} method it simply returns this object.</span></span><span class="line" lang="java" id="LC44"><span class="cm"> * This is useful, for instance in unit tests or in cases when you want to pass a specific object to a component which expects a {@code ConcurrentInitializer}.</span></span><span class="line" lang="java" id="LC45"><span class="cm"> * &lt;/p&gt;</span></span><span class="line" lang="java" id="LC46"><span class="cm"> *</span></span><span class="line" lang="java" id="LC47"><span class="cm"> * &lt;p&gt;The {@link org.apache.commons.lang3.concurrent.LazyInitializer} class can be used to defer the creation of an object until it is actually used.</span></span><span class="line" lang="java" id="LC48"><span class="cm"> * This makes sense, for instance, if the creation of the object is expensive and would slow down application startup or if the object is needed only for special executions.</span></span><span class="line" lang="java" id="LC49"><span class="cm"> * {@code LazyInitializer} implements the &lt;em&gt;double-check idiom for an instance field&lt;/em&gt; as discussed in Joshua Bloch&#39;s &quot;Effective Java&quot;, 2nd edition, item 71.</span></span><span class="line" lang="java" id="LC50"><span class="cm"> * It uses &lt;strong&gt;volatile&lt;/strong&gt; fields to reduce the amount of synchronization.</span></span><span class="line" lang="java" id="LC51"><span class="cm"> * Note that this idiom is appropriate for instance fields only.</span></span><span class="line" lang="java" id="LC52"><span class="cm"> * For &lt;strong&gt;static&lt;/strong&gt; fields there are superior alternatives.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC53"><span class="cm"> *</span></span><span class="line" lang="java" id="LC54"><span class="cm"> * &lt;p&gt;We provide an example use case to demonstrate the usage of this class:</span></span><span class="line" lang="java" id="LC55"><span class="cm"> * A server application uses multiple worker threads to process client requests.</span></span><span class="line" lang="java" id="LC56"><span class="cm"> * If such a request causes a fatal error, an administrator is to be notified using a special messaging service.</span></span><span class="line" lang="java" id="LC57"><span class="cm"> * We assume that the creation of the messaging service is an expensive operation.</span></span><span class="line" lang="java" id="LC58"><span class="cm"> * So it should only be performed if an error actually occurs.</span></span><span class="line" lang="java" id="LC59"><span class="cm"> * Here is where {@code LazyInitializer} comes into play.</span></span><span class="line" lang="java" id="LC60"><span class="cm"> * We create a specialized subclass for creating and initializing an instance of our messaging service.</span></span><span class="line" lang="java" id="LC61"><span class="cm"> * {@code LazyInitializer} declares an abstract {@link org.apache.commons.lang3.concurrent.LazyInitializer#initialize() initialize()} method which we have to implement to create the messaging service object:&lt;/p&gt;</span></span><span class="line" lang="java" id="LC62"><span class="cm"> *</span></span><span class="line" lang="java" id="LC63"><span class="cm"> * &lt;pre&gt;</span></span><span class="line" lang="java" id="LC64"><span class="cm"> * &lt;code&gt;</span></span><span class="line" lang="java" id="LC65"><span class="cm"> * public class MessagingServiceInitializer extends LazyInitializer&amp;lt;MessagingService&amp;gt; {</span></span><span class="line" lang="java" id="LC66"><span class="cm"> *   protected MessagingService initialize() throws ConcurrentException {</span></span><span class="line" lang="java" id="LC67"><span class="cm"> *     // Do all necessary steps to create and initialize the service object</span></span><span class="line" lang="java" id="LC68"><span class="cm"> *     MessagingService service = ...</span></span><span class="line" lang="java" id="LC69"><span class="cm"> *     return service;</span></span><span class="line" lang="java" id="LC70"><span class="cm"> *   }</span></span><span class="line" lang="java" id="LC71"><span class="cm"> * }</span></span><span class="line" lang="java" id="LC72"><span class="cm"> * &lt;/code&gt;</span></span><span class="line" lang="java" id="LC73"><span class="cm"> * &lt;/pre&gt;</span></span><span class="line" lang="java" id="LC74"><span class="cm"> *</span></span><span class="line" lang="java" id="LC75"><span class="cm"> * &lt;p&gt; Now each server thread is passed a reference to a shared instance of our new {@code MessagingServiceInitializer} class.</span></span><span class="line" lang="java" id="LC76"><span class="cm"> * The threads run in a loop processing client requests. If an error is detected, the messaging service is obtained from the initializer, and the administrator is notified:&lt;/p&gt;</span></span><span class="line" lang="java" id="LC77"><span class="cm"> *</span></span><span class="line" lang="java" id="LC78"><span class="cm"> * &lt;pre&gt;</span></span><span class="line" lang="java" id="LC79"><span class="cm"> * &lt;code&gt;</span></span><span class="line" lang="java" id="LC80"><span class="cm"> * public class ServerThread implements Runnable {</span></span><span class="line" lang="java" id="LC81"><span class="cm"> *  // The initializer for obtaining the messaging service.</span></span><span class="line" lang="java" id="LC82"><span class="cm"> *  private final ConcurrentInitializer&amp;lt;MessagingService&amp;gt; initializer;</span></span><span class="line" lang="java" id="LC83"><span class="cm"> *</span></span><span class="line" lang="java" id="LC84"><span class="cm"> *  public ServerThread(ConcurrentInitializer&amp;lt;MessagingService&amp;gt; init) {</span></span><span class="line" lang="java" id="LC85"><span class="cm"> *    initializer = init;</span></span><span class="line" lang="java" id="LC86"><span class="cm"> *  }</span></span><span class="line" lang="java" id="LC87"><span class="cm"> *</span></span><span class="line" lang="java" id="LC88"><span class="cm"> *  public void run() {</span></span><span class="line" lang="java" id="LC89"><span class="cm"> *    while (true) {</span></span><span class="line" lang="java" id="LC90"><span class="cm"> *      try {</span></span><span class="line" lang="java" id="LC91"><span class="cm"> *        // wait for request</span></span><span class="line" lang="java" id="LC92"><span class="cm"> *        // process request</span></span><span class="line" lang="java" id="LC93"><span class="cm"> *      } catch (FatalServerException ex) {</span></span><span class="line" lang="java" id="LC94"><span class="cm"> *        // get messaging service</span></span><span class="line" lang="java" id="LC95"><span class="cm"> *        try {</span></span><span class="line" lang="java" id="LC96"><span class="cm"> *          MessagingService svc = initializer.get();</span></span><span class="line" lang="java" id="LC97"><span class="cm"> *          svc.notifyAdministrator(ex);</span></span><span class="line" lang="java" id="LC98"><span class="cm"> *        } catch (ConcurrentException cex) {</span></span><span class="line" lang="java" id="LC99"><span class="cm"> *          cex.printStackTrace();</span></span><span class="line" lang="java" id="LC100"><span class="cm"> *        }</span></span><span class="line" lang="java" id="LC101"><span class="cm"> *      }</span></span><span class="line" lang="java" id="LC102"><span class="cm"> *    }</span></span><span class="line" lang="java" id="LC103"><span class="cm"> *  }</span></span><span class="line" lang="java" id="LC104"><span class="cm"> * }</span></span><span class="line" lang="java" id="LC105"><span class="cm"> * &lt;/code&gt;</span></span><span class="line" lang="java" id="LC106"><span class="cm"> * &lt;/pre&gt;</span></span><span class="line" lang="java" id="LC107"><span class="cm"> *</span></span><span class="line" lang="java" id="LC108"><span class="cm"> * &lt;p&gt;The {@link org.apache.commons.lang3.concurrent.AtomicInitializer} class is very similar to {@code LazyInitializer}.</span></span><span class="line" lang="java" id="LC109"><span class="cm"> * It serves the same purpose: to defer the creation of an object until it is needed.</span></span><span class="line" lang="java" id="LC110"><span class="cm"> * The internal structure is also very similar.</span></span><span class="line" lang="java" id="LC111"><span class="cm"> * Again there is an abstract {@link org.apache.commons.lang3.concurrent.AtomicInitializer#initialize() initialize()} method which has to be implemented by concrete subclasses in order to create and initialize the managed object.</span></span><span class="line" lang="java" id="LC112"><span class="cm"> * Actually, in our example above we can turn the {@code MessagingServiceInitializer} into an atomic initializer by simply changing the &lt;strong&gt;extends&lt;/strong&gt; declaration to refer to {@code AtomicInitializer&amp;lt;MessagingService&amp;gt;} as super class.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC113"><span class="cm"> *</span></span><span class="line" lang="java" id="LC114"><span class="cm"> * &lt;p&gt;With {@link org.apache.commons.lang3.concurrent.AtomicSafeInitializer} there is yet another variant implementing the lazy initializing pattern.</span></span><span class="line" lang="java" id="LC115"><span class="cm"> * Its implementation is close to {@code AtomicInitializer}; it also uses atomic variables internally and therefore does not need synchronization.</span></span><span class="line" lang="java" id="LC116"><span class="cm"> * The name &amp;quot;Safe&amp;quot; is derived from the fact that it implements an additional check which guarantees that the {@link org.apache.commons.lang3.concurrent.AtomicSafeInitializer#initialize() initialize()} method is called only once.</span></span><span class="line" lang="java" id="LC117"><span class="cm"> * So it behaves exactly in the same way as {@code LazyInitializer}.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC118"><span class="cm"> *</span></span><span class="line" lang="java" id="LC119"><span class="cm"> * &lt;p&gt;Now, which one of the lazy initializer implementations should you use?</span></span><span class="line" lang="java" id="LC120"><span class="cm"> * First of all we have to state that is is problematic to give general recommendations regarding the performance of these classes.</span></span><span class="line" lang="java" id="LC121"><span class="cm"> * The initializers  make use of low-level functionality whose efficiency depends on multiple factors including the target platform and the number of concurrent threads.</span></span><span class="line" lang="java" id="LC122"><span class="cm"> * So developers should make their own benchmarks in scenarios close to their specific use cases.</span></span><span class="line" lang="java" id="LC123"><span class="cm"> * The following statements are rules of thumb which have to be verified in practice.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC124"><span class="cm"> *</span></span><span class="line" lang="java" id="LC125"><span class="cm"> * &lt;p&gt;{@code AtomicInitializer} is probably the most efficient implementation due to its lack of synchronization and further checks.</span></span><span class="line" lang="java" id="LC126"><span class="cm"> * Its main drawback is that the {@code initialize()} method can be called multiple times.</span></span><span class="line" lang="java" id="LC127"><span class="cm"> * In cases where this is not an issue {@code AtomicInitializer} is a good choice.</span></span><span class="line" lang="java" id="LC128"><span class="cm"> * {@code AtomicSafeInitializer} and  {@code LazyInitializer} both guarantee that the initialization method is called only once.</span></span><span class="line" lang="java" id="LC129"><span class="cm"> * Because {@code AtomicSafeInitializer} does not use synchronization it is probably slightly more efficient than {@code LazyInitializer}, but the concrete numbers might depend on the level of concurrency.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC130"><span class="cm"> *</span></span><span class="line" lang="java" id="LC131"><span class="cm"> * &lt;p&gt;Another implementation of the {@code ConcurrentInitializer} interface is {@link org.apache.commons.lang3.concurrent.BackgroundInitializer}.</span></span><span class="line" lang="java" id="LC132"><span class="cm"> * It is again an abstract base class with an {@link org.apache.commons.lang3.concurrent.BackgroundInitializer#initialize() initialize()} method that has to be defined by concrete subclasses.</span></span><span class="line" lang="java" id="LC133"><span class="cm"> * The idea of {@code BackgroundInitializer} is that it calls the {@code initialize()} method in a separate worker thread.</span></span><span class="line" lang="java" id="LC134"><span class="cm"> * An application creates a background initializer and starts it.</span></span><span class="line" lang="java" id="LC135"><span class="cm"> * Then it can continue with its work while the initializer runs in parallel.</span></span><span class="line" lang="java" id="LC136"><span class="cm"> * When the application needs the results of the initializer it calls its {@code get()} method.</span></span><span class="line" lang="java" id="LC137"><span class="cm"> * {@code get()} blocks until the initialization is complete.</span></span><span class="line" lang="java" id="LC138"><span class="cm"> * This is useful for instance at application startup.</span></span><span class="line" lang="java" id="LC139"><span class="cm"> * Here initialization steps (e.g. reading configuration files, opening a database connection, etc.) can be run in background threads while the application shows a splash screen and constructs its UI.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC140"><span class="cm"> *</span></span><span class="line" lang="java" id="LC141"><span class="cm"> * &lt;p&gt;As a concrete example consider an application that has to read the content of a URL - maybe a page with news - which is to be displayed to the user after login.</span></span><span class="line" lang="java" id="LC142"><span class="cm"> * Because loading the data over the network can take some time a specialized implementation of {@code BackgroundInitializer} can be created for this purpose:&lt;/p&gt;</span></span><span class="line" lang="java" id="LC143"><span class="cm"> *</span></span><span class="line" lang="java" id="LC144"><span class="cm"> * &lt;pre&gt;</span></span><span class="line" lang="java" id="LC145"><span class="cm"> * &lt;code&gt;</span></span><span class="line" lang="java" id="LC146"><span class="cm"> * public class URLLoader extends BackgroundInitializer&amp;lt;String&amp;gt; {</span></span><span class="line" lang="java" id="LC147"><span class="cm"> *   // The URL to be loaded.</span></span><span class="line" lang="java" id="LC148"><span class="cm"> *   private final URL url;</span></span><span class="line" lang="java" id="LC149"><span class="cm"> *</span></span><span class="line" lang="java" id="LC150"><span class="cm"> *   public URLLoader(URL u) {</span></span><span class="line" lang="java" id="LC151"><span class="cm"> *     url = u;</span></span><span class="line" lang="java" id="LC152"><span class="cm"> *   }</span></span><span class="line" lang="java" id="LC153"><span class="cm"> *</span></span><span class="line" lang="java" id="LC154"><span class="cm"> *   protected String initialize() throws ConcurrentException {</span></span><span class="line" lang="java" id="LC155"><span class="cm"> *     try {</span></span><span class="line" lang="java" id="LC156"><span class="cm"> *       InputStream in = url.openStream();</span></span><span class="line" lang="java" id="LC157"><span class="cm"> *       // read content into string</span></span><span class="line" lang="java" id="LC158"><span class="cm"> *       ...</span></span><span class="line" lang="java" id="LC159"><span class="cm"> *       return content;</span></span><span class="line" lang="java" id="LC160"><span class="cm"> *     } catch (IOException ioex) {</span></span><span class="line" lang="java" id="LC161"><span class="cm"> *       throw new ConcurrentException(ioex);</span></span><span class="line" lang="java" id="LC162"><span class="cm"> *     }</span></span><span class="line" lang="java" id="LC163"><span class="cm"> *   }</span></span><span class="line" lang="java" id="LC164"><span class="cm"> * }</span></span><span class="line" lang="java" id="LC165"><span class="cm"> * &lt;/code&gt;</span></span><span class="line" lang="java" id="LC166"><span class="cm"> * &lt;/pre&gt;</span></span><span class="line" lang="java" id="LC167"><span class="cm"> *</span></span><span class="line" lang="java" id="LC168"><span class="cm"> * &lt;p&gt;An application creates an instance of {@code URLLoader} and starts it.</span></span><span class="line" lang="java" id="LC169"><span class="cm"> * Then it can do other things.</span></span><span class="line" lang="java" id="LC170"><span class="cm"> * When it needs the content of the URL it calls the initializer&#39;s {@code get()} method:&lt;/p&gt;</span></span><span class="line" lang="java" id="LC171"><span class="cm"> *</span></span><span class="line" lang="java" id="LC172"><span class="cm"> * &lt;pre&gt;</span></span><span class="line" lang="java" id="LC173"><span class="cm"> * &lt;code&gt;</span></span><span class="line" lang="java" id="LC174"><span class="cm"> * URL url = new URL(&quot;http://www.application-home-page.com/&quot;);</span></span><span class="line" lang="java" id="LC175"><span class="cm"> * URLLoader loader = new URLLoader(url);</span></span><span class="line" lang="java" id="LC176"><span class="cm"> * loader.start();  // this starts the background initialization</span></span><span class="line" lang="java" id="LC177"><span class="cm"> *</span></span><span class="line" lang="java" id="LC178"><span class="cm"> * // do other stuff</span></span><span class="line" lang="java" id="LC179"><span class="cm"> * ...</span></span><span class="line" lang="java" id="LC180"><span class="cm"> * // now obtain the content of the URL</span></span><span class="line" lang="java" id="LC181"><span class="cm"> * String content;</span></span><span class="line" lang="java" id="LC182"><span class="cm"> * try {</span></span><span class="line" lang="java" id="LC183"><span class="cm"> *   content = loader.get();  // this may block</span></span><span class="line" lang="java" id="LC184"><span class="cm"> * } catch (ConcurrentException cex) {</span></span><span class="line" lang="java" id="LC185"><span class="cm"> *   content = &quot;Error when loading URL &quot; + url;</span></span><span class="line" lang="java" id="LC186"><span class="cm"> * }</span></span><span class="line" lang="java" id="LC187"><span class="cm"> * // display content</span></span><span class="line" lang="java" id="LC188"><span class="cm"> * &lt;/code&gt;</span></span><span class="line" lang="java" id="LC189"><span class="cm"> * &lt;/pre&gt;</span></span><span class="line" lang="java" id="LC190"><span class="cm"> *</span></span><span class="line" lang="java" id="LC191"><span class="cm"> * &lt;p&gt; Related to {@code BackgroundInitializer} is the {@link org.apache.commons.lang3.concurrent.MultiBackgroundInitializer} class.</span></span><span class="line" lang="java" id="LC192"><span class="cm"> * As the name implies, this class can handle multiple initializations in parallel.</span></span><span class="line" lang="java" id="LC193"><span class="cm"> * The basic usage scenario is that a {@code MultiBackgroundInitializer} instance is created.</span></span><span class="line" lang="java" id="LC194"><span class="cm"> * Then an arbitrary number of {@code BackgroundInitializer} objects is added using the {@link org.apache.commons.lang3.concurrent.MultiBackgroundInitializer#addInitializer(String, BackgroundInitializer)} method.</span></span><span class="line" lang="java" id="LC195"><span class="cm"> * When adding an initializer a string has to be provided which is later used to obtain the result for this initializer.</span></span><span class="line" lang="java" id="LC196"><span class="cm"> * When all initializers have been added the {@link org.apache.commons.lang3.concurrent.MultiBackgroundInitializer#start()} method is called.</span></span><span class="line" lang="java" id="LC197"><span class="cm"> * This starts processing of all initializers.</span></span><span class="line" lang="java" id="LC198"><span class="cm"> * Later the {@code get()} method can be called.</span></span><span class="line" lang="java" id="LC199"><span class="cm"> * It waits until all initializers have finished their initialization.</span></span><span class="line" lang="java" id="LC200"><span class="cm"> * {@code get()} returns an object of type {@link org.apache.commons.lang3.concurrent.MultiBackgroundInitializer.MultiBackgroundInitializerResults}.</span></span><span class="line" lang="java" id="LC201"><span class="cm"> * This object provides information about all initializations that have been performed.</span></span><span class="line" lang="java" id="LC202"><span class="cm"> * It can be checked whether a specific initializer was successful or threw an exception.</span></span><span class="line" lang="java" id="LC203"><span class="cm"> * Of course, all initialization results can be queried.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC204"><span class="cm"> *</span></span><span class="line" lang="java" id="LC205"><span class="cm"> * &lt;p&gt;With {@code MultiBackgroundInitializer} we can extend our example to perform multiple initialization steps.</span></span><span class="line" lang="java" id="LC206"><span class="cm"> * Suppose that in addition to loading a web site we also want to create a JPA entity manager factory and read a configuration file.</span></span><span class="line" lang="java" id="LC207"><span class="cm"> * We assume that corresponding {@code BackgroundInitializer} implementations exist.</span></span><span class="line" lang="java" id="LC208"><span class="cm"> * The following example fragment shows the usage of {@code MultiBackgroundInitializer} for this purpose:&lt;/p&gt;</span></span><span class="line" lang="java" id="LC209"><span class="cm"> *</span></span><span class="line" lang="java" id="LC210"><span class="cm"> * &lt;pre&gt;</span></span><span class="line" lang="java" id="LC211"><span class="cm"> * &lt;code&gt;</span></span><span class="line" lang="java" id="LC212"><span class="cm"> * MultiBackgroundInitializer initializer = new MultiBackgroundInitializer();</span></span><span class="line" lang="java" id="LC213"><span class="cm"> * initializer.addInitializer(&quot;url&quot;, new URLLoader(url));</span></span><span class="line" lang="java" id="LC214"><span class="cm"> * initializer.addInitializer(&quot;jpa&quot;, new JPAEMFInitializer());</span></span><span class="line" lang="java" id="LC215"><span class="cm"> * initializer.addInitializer(&quot;config&quot;, new ConfigurationInitializer());</span></span><span class="line" lang="java" id="LC216"><span class="cm"> * initializer.start();  // start background processing</span></span><span class="line" lang="java" id="LC217"><span class="cm"> *</span></span><span class="line" lang="java" id="LC218"><span class="cm"> * // do other interesting things in parallel</span></span><span class="line" lang="java" id="LC219"><span class="cm"> * ...</span></span><span class="line" lang="java" id="LC220"><span class="cm"> * // evaluate the results of background initialization</span></span><span class="line" lang="java" id="LC221"><span class="cm"> * MultiBackgroundInitializer.MultiBackgroundInitializerResults results =</span></span><span class="line" lang="java" id="LC222"><span class="cm"> * initializer.get();</span></span><span class="line" lang="java" id="LC223"><span class="cm"> * String urlContent = (String) results.getResultObject(&quot;url&quot;);</span></span><span class="line" lang="java" id="LC224"><span class="cm"> * EntityManagerFactory emf =</span></span><span class="line" lang="java" id="LC225"><span class="cm"> * (EntityManagerFactory) results.getResultObject(&quot;jpa&quot;);</span></span><span class="line" lang="java" id="LC226"><span class="cm"> * ...</span></span><span class="line" lang="java" id="LC227"><span class="cm"> * &lt;/code&gt;</span></span><span class="line" lang="java" id="LC228"><span class="cm"> * &lt;/pre&gt;</span></span><span class="line" lang="java" id="LC229"><span class="cm"> *</span></span><span class="line" lang="java" id="LC230"><span class="cm"> * &lt;p&gt;The child initializers are added to the multi initializer and are assigned a unique name.</span></span><span class="line" lang="java" id="LC231"><span class="cm"> * The object returned by the {@code get()} method is then queried for the single results using these unique names.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC232"><span class="cm"> *</span></span><span class="line" lang="java" id="LC233"><span class="cm"> * &lt;p&gt; If background initializers - including {@code MultiBackgroundInitializer} - are created using the standard constructor, they create their own {@link java.util.concurrent.ExecutorService} which is used behind the scenes to execute the worker tasks.</span></span><span class="line" lang="java" id="LC234"><span class="cm"> * It is also possible to pass in an {@code ExecutorService} when the initializer is constructed.</span></span><span class="line" lang="java" id="LC235"><span class="cm"> * That way client code can configure the {@code ExecutorService} according to its specific needs; for instance, the number of threads available could be limited.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC236"><span class="cm"> *</span></span><span class="line" lang="java" id="LC237"><span class="cm"> * &lt;h2&gt;Utility Classes&lt;/h2&gt;</span></span><span class="line" lang="java" id="LC238"><span class="cm"> *</span></span><span class="line" lang="java" id="LC239"><span class="cm"> * &lt;p&gt;Another group of classes in the new {@code concurrent} package offers some generic functionality related to concurrency.</span></span><span class="line" lang="java" id="LC240"><span class="cm"> * There is the {@link org.apache.commons.lang3.concurrent.ConcurrentUtils} class with a bunch of static utility methods.</span></span><span class="line" lang="java" id="LC241"><span class="cm"> * One focus of this class is dealing with exceptions thrown by JDK classes.</span></span><span class="line" lang="java" id="LC242"><span class="cm"> * Many JDK classes of the executor framework throw exceptions of type {@link java.util.concurrent.ExecutionException} if something goes wrong.</span></span><span class="line" lang="java" id="LC243"><span class="cm"> * The root cause of these exceptions can also be a runtime exception or even an error.</span></span><span class="line" lang="java" id="LC244"><span class="cm"> * In typical Java programming you often do not want to deal with runtime exceptions directly; rather you let them fall through the hierarchy of method invocations until they reach a central exception handler.</span></span><span class="line" lang="java" id="LC245"><span class="cm"> * Checked exceptions in contrast are usually handled close to their occurrence.</span></span><span class="line" lang="java" id="LC246"><span class="cm"> * With {@code ExecutionException} this principle is violated.</span></span><span class="line" lang="java" id="LC247"><span class="cm"> * Because it is a checked exception, an application is forced to handle it even if the cause is a runtime exception.</span></span><span class="line" lang="java" id="LC248"><span class="cm"> * So you typically have to inspect the cause of the {@code ExecutionException} and test whether it is a checked exception which has to be handled. If this is not the case, the causing exception can be rethrown.</span></span><span class="line" lang="java" id="LC249"><span class="cm"> * &lt;/p&gt;</span></span><span class="line" lang="java" id="LC250"><span class="cm"> *</span></span><span class="line" lang="java" id="LC251"><span class="cm"> * &lt;p&gt;The {@link org.apache.commons.lang3.concurrent.ConcurrentUtils#extractCause(java.util.concurrent.ExecutionException)} method does this work for you.</span></span><span class="line" lang="java" id="LC252"><span class="cm"> * It is passed an {@code ExecutionException} and tests its root cause.</span></span><span class="line" lang="java" id="LC253"><span class="cm"> * If this is an error or a runtime exception, it is directly rethrown.</span></span><span class="line" lang="java" id="LC254"><span class="cm"> * Otherwise, an instance of {@link org.apache.commons.lang3.concurrent.ConcurrentException} is created and initialized with the root cause</span></span><span class="line" lang="java" id="LC255"><span class="cm"> * ({@code ConcurrentException} is a new exception class in the {@code o.a.c.l.concurrent} package).</span></span><span class="line" lang="java" id="LC256"><span class="cm"> * So if you get such a {@code ConcurrentException}, you can be sure that the original cause for the {@code ExecutionException} was a checked exception.</span></span><span class="line" lang="java" id="LC257"><span class="cm"> * For users who prefer runtime exceptions in general there is also an {@link org.apache.commons.lang3.concurrent.ConcurrentUtils#extractCauseUnchecked(java.util.concurrent.ExecutionException)} method which behaves like {@code extractCause()}, but returns the unchecked exception {@link org.apache.commons.lang3.concurrent.ConcurrentRuntimeException} instead.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC258"><span class="cm"> *</span></span><span class="line" lang="java" id="LC259"><span class="cm"> * &lt;p&gt;In addition to the {@code extractCause()} methods there are corresponding {@link org.apache.commons.lang3.concurrent.ConcurrentUtils#handleCause(java.util.concurrent.ExecutionException)} and {@link org.apache.commons.lang3.concurrent.ConcurrentUtils#handleCauseUnchecked(java.util.concurrent.ExecutionException)} methods.</span></span><span class="line" lang="java" id="LC260"><span class="cm"> * These methods extract the cause of the passed in {@code ExecutionException} and throw the resulting {@code ConcurrentException} or {@code ConcurrentRuntimeException}.</span></span><span class="line" lang="java" id="LC261"><span class="cm"> * This makes it easy to transform an {@code ExecutionException} into a {@code ConcurrentException} ignoring unchecked exceptions:&lt;/p&gt;</span></span><span class="line" lang="java" id="LC262"><span class="cm"> *</span></span><span class="line" lang="java" id="LC263"><span class="cm"> * &lt;pre&gt;</span></span><span class="line" lang="java" id="LC264"><span class="cm"> * &lt;code&gt;</span></span><span class="line" lang="java" id="LC265"><span class="cm"> * Future&amp;lt;Object&amp;gt; future = ...;</span></span><span class="line" lang="java" id="LC266"><span class="cm"> * try {</span></span><span class="line" lang="java" id="LC267"><span class="cm"> *   Object result = future.get();</span></span><span class="line" lang="java" id="LC268"><span class="cm"> *   ...</span></span><span class="line" lang="java" id="LC269"><span class="cm"> * } catch (ExecutionException eex) {</span></span><span class="line" lang="java" id="LC270"><span class="cm"> *   ConcurrentUtils.handleCause(eex);</span></span><span class="line" lang="java" id="LC271"><span class="cm"> * }</span></span><span class="line" lang="java" id="LC272"><span class="cm"> * &lt;/code&gt;</span></span><span class="line" lang="java" id="LC273"><span class="cm"> * &lt;/pre&gt;</span></span><span class="line" lang="java" id="LC274"><span class="cm"> *</span></span><span class="line" lang="java" id="LC275"><span class="cm"> * &lt;p&gt;There is also some support for the concurrent initializers introduced in the last sub section.</span></span><span class="line" lang="java" id="LC276"><span class="cm"> * The {@code initialize()} method is passed a {@code ConcurrentInitializer} object and returns the object created by this initializer.</span></span><span class="line" lang="java" id="LC277"><span class="cm"> * It is null-safe.</span></span><span class="line" lang="java" id="LC278"><span class="cm"> * The {@code initializeUnchecked()} method works analogously, but a {@code ConcurrentException} throws by the initializer is rethrown as a {@code ConcurrentRuntimeException}.</span></span><span class="line" lang="java" id="LC279"><span class="cm"> * This is especially useful if the specific {@code ConcurrentInitializer} does not throw checked exceptions.</span></span><span class="line" lang="java" id="LC280"><span class="cm"> * Using this method the code for requesting the object of an initializer becomes less verbose.</span></span><span class="line" lang="java" id="LC281"><span class="cm"> * The direct invocation looks as follows:&lt;/p&gt;</span></span><span class="line" lang="java" id="LC282"><span class="cm"> *</span></span><span class="line" lang="java" id="LC283"><span class="cm"> * &lt;pre&gt;</span></span><span class="line" lang="java" id="LC284"><span class="cm"> * &lt;code&gt;</span></span><span class="line" lang="java" id="LC285"><span class="cm"> * ConcurrentInitializer&amp;lt;MyClass&amp;gt; initializer = ...;</span></span><span class="line" lang="java" id="LC286"><span class="cm"> * try {</span></span><span class="line" lang="java" id="LC287"><span class="cm"> *   MyClass obj = initializer.get();</span></span><span class="line" lang="java" id="LC288"><span class="cm"> *   // do something with obj</span></span><span class="line" lang="java" id="LC289"><span class="cm"> * } catch (ConcurrentException cex) {</span></span><span class="line" lang="java" id="LC290"><span class="cm"> *   // exception handling</span></span><span class="line" lang="java" id="LC291"><span class="cm"> * }</span></span><span class="line" lang="java" id="LC292"><span class="cm"> * &lt;/code&gt;</span></span><span class="line" lang="java" id="LC293"><span class="cm"> * &lt;/pre&gt;</span></span><span class="line" lang="java" id="LC294"><span class="cm"> *</span></span><span class="line" lang="java" id="LC295"><span class="cm"> * &lt;p&gt;Using the {@link org.apache.commons.lang3.concurrent.ConcurrentUtils#initializeUnchecked(ConcurrentInitializer)} method, this becomes:&lt;/p&gt;</span></span><span class="line" lang="java" id="LC296"><span class="cm"> *</span></span><span class="line" lang="java" id="LC297"><span class="cm"> * &lt;pre&gt;</span></span><span class="line" lang="java" id="LC298"><span class="cm"> * &lt;code&gt;</span></span><span class="line" lang="java" id="LC299"><span class="cm"> * ConcurrentInitializer&amp;lt;MyClass&amp;gt; initializer = ...;</span></span><span class="line" lang="java" id="LC300"><span class="cm"> * MyClass obj = ConcurrentUtils.initializeUnchecked(initializer);</span></span><span class="line" lang="java" id="LC301"><span class="cm"> * // do something with obj</span></span><span class="line" lang="java" id="LC302"><span class="cm"> * &lt;/code&gt;</span></span><span class="line" lang="java" id="LC303"><span class="cm"> * &lt;/pre&gt;</span></span><span class="line" lang="java" id="LC304"><span class="cm"> *</span></span><span class="line" lang="java" id="LC305"><span class="cm"> * &lt;p&gt;Another utility class deals with the creation of threads.</span></span><span class="line" lang="java" id="LC306"><span class="cm"> * When using the &lt;em&gt;Executor&lt;/em&gt; framework new in JDK 1.5 the developer usually does not have to care about creating threads; the executors create the threads they need on demand.</span></span><span class="line" lang="java" id="LC307"><span class="cm"> * However, sometimes it is desired to set some properties of the newly created worker threads.</span></span><span class="line" lang="java" id="LC308"><span class="cm"> * This is possible through the {@link java.util.concurrent.ThreadFactory} interface; an implementation of this interface has to be created and passed to an executor on creation time.</span></span><span class="line" lang="java" id="LC309"><span class="cm"> * Currently, the JDK does not provide an implementation of {@code ThreadFactory}, so one has to start from scratch. &lt;/p&gt;</span></span><span class="line" lang="java" id="LC310"><span class="cm"> *</span></span><span class="line" lang="java" id="LC311"><span class="cm"> * &lt;p&gt; With {@link org.apache.commons.lang3.concurrent.BasicThreadFactory} Commons Lang has an implementation of {@code ThreadFactory} that works out of the box for many common use cases.</span></span><span class="line" lang="java" id="LC312"><span class="cm"> * For instance, it is possible to set a naming pattern for the new threads, set the daemon flag and a priority, or install a handler for uncaught exceptions.</span></span><span class="line" lang="java" id="LC313"><span class="cm"> * Instances of {@code BasicThreadFactory} are created and configured using the nested {@link org.apache.commons.lang3.concurrent.BasicThreadFactory.Builder} class.</span></span><span class="line" lang="java" id="LC314"><span class="cm"> * The following example shows a typical usage scenario:&lt;/p&gt;</span></span><span class="line" lang="java" id="LC315"><span class="cm"> *</span></span><span class="line" lang="java" id="LC316"><span class="cm"> * &lt;pre&gt;</span></span><span class="line" lang="java" id="LC317"><span class="cm"> * &lt;code&gt;</span></span><span class="line" lang="java" id="LC318"><span class="cm"> * BasicThreadFactory factory = new BasicThreadFactory.Builder()</span></span><span class="line" lang="java" id="LC319"><span class="cm"> *   .namingPattern(&quot;worker-thread-%d&quot;)</span></span><span class="line" lang="java" id="LC320"><span class="cm"> *   .daemon(true)</span></span><span class="line" lang="java" id="LC321"><span class="cm"> *   .uncaughtExceptionHandler(myHandler)</span></span><span class="line" lang="java" id="LC322"><span class="cm"> *   .build();</span></span><span class="line" lang="java" id="LC323"><span class="cm"> * ExecutorService exec = Executors.newSingleThreadExecutor(factory);</span></span><span class="line" lang="java" id="LC324"><span class="cm"> * &lt;/code&gt;</span></span><span class="line" lang="java" id="LC325"><span class="cm"> * &lt;/pre&gt;</span></span><span class="line" lang="java" id="LC326"><span class="cm"> *</span></span><span class="line" lang="java" id="LC327"><span class="cm"> * &lt;p&gt;The nested {@code Builder} class defines some methods for configuring the new {@code BasicThreadFactory} instance.</span></span><span class="line" lang="java" id="LC328"><span class="cm"> * Objects of this class are immutable, so these attributes cannot be changed later.</span></span><span class="line" lang="java" id="LC329"><span class="cm"> * The naming pattern is a string which can be passed to {@code String.format()}.</span></span><span class="line" lang="java" id="LC330"><span class="cm"> * The placeholder &lt;em&gt;%d&lt;/em&gt; is replaced by an increasing counter value.</span></span><span class="line" lang="java" id="LC331"><span class="cm"> * An instance can wrap another {@code ThreadFactory} implementation; this is achieved by calling the builder&#39;s {@link org.apache.commons.lang3.concurrent.BasicThreadFactory.Builder#wrappedFactory(java.util.concurrent.ThreadFactory) wrappedFactory(ThreadFactory)} method.</span></span><span class="line" lang="java" id="LC332"><span class="cm"> * This factory is then used for creating new threads; after that the specific attributes are applied to the new thread.</span></span><span class="line" lang="java" id="LC333"><span class="cm"> * If no wrapped factory is set, the default factory provided by the JDK is used.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC334"><span class="cm"> *</span></span><span class="line" lang="java" id="LC335"><span class="cm"> * &lt;h2&gt;Synchronization objects&lt;/h2&gt;</span></span><span class="line" lang="java" id="LC336"><span class="cm"> *</span></span><span class="line" lang="java" id="LC337"><span class="cm"> * &lt;p&gt;The {@code concurrent} package also provides some support for specific synchronization problems with threads.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC338"><span class="cm"> *</span></span><span class="line" lang="java" id="LC339"><span class="cm"> * &lt;p&gt; {@link org.apache.commons.lang3.concurrent.TimedSemaphore} allows restricted access to a resource in a given time frame.</span></span><span class="line" lang="java" id="LC340"><span class="cm"> * Similar to a semaphore, a number of permits can be acquired.</span></span><span class="line" lang="java" id="LC341"><span class="cm"> * What is new is the fact that the permits available are related to a given time unit.</span></span><span class="line" lang="java" id="LC342"><span class="cm"> * For instance, the timed semaphore can be configured to allow 10 permits in a second.</span></span><span class="line" lang="java" id="LC343"><span class="cm"> * Now multiple threads access the semaphore and call its {@link org.apache.commons.lang3.concurrent.TimedSemaphore#acquire()} method.</span></span><span class="line" lang="java" id="LC344"><span class="cm"> * The semaphore keeps track about the number of granted permits in the current time frame.</span></span><span class="line" lang="java" id="LC345"><span class="cm"> * Only 10 calls are allowed; if there are further callers, they are blocked until the time frame (one second in this example) is over.</span></span><span class="line" lang="java" id="LC346"><span class="cm"> * Then all blocking threads are released, and the counter of available permits is reset to 0.</span></span><span class="line" lang="java" id="LC347"><span class="cm"> * So the game can start anew.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC348"><span class="cm"> *</span></span><span class="line" lang="java" id="LC349"><span class="cm"> * &lt;p&gt; What are use cases for {@code TimedSemaphore}?</span></span><span class="line" lang="java" id="LC350"><span class="cm"> * One example is to artificially limit the load produced by multiple threads.</span></span><span class="line" lang="java" id="LC351"><span class="cm"> * Consider a batch application accessing a database to extract statistical data.</span></span><span class="line" lang="java" id="LC352"><span class="cm"> * The application runs multiple threads which issue database queries in parallel and perform some calculation on the results.</span></span><span class="line" lang="java" id="LC353"><span class="cm"> * If the database to be processed is huge and is also used by a production system, multiple factors have to be balanced:</span></span><span class="line" lang="java" id="LC354"><span class="cm"> * On one hand, the time required for the statistical evaluation should not take too long.</span></span><span class="line" lang="java" id="LC355"><span class="cm"> * Therefore you will probably use a larger number of threads because most of its life time a thread will just wait for the database to return query results.</span></span><span class="line" lang="java" id="LC356"><span class="cm"> * On the other hand, the load on the database generated by all these threads should be limited so that the responsiveness of the production system is not affected.</span></span><span class="line" lang="java" id="LC357"><span class="cm"> * With a {@code TimedSemaphore} object this can be achieved.</span></span><span class="line" lang="java" id="LC358"><span class="cm"> * The semaphore can be configured to allow e.g. 100 queries per second.</span></span><span class="line" lang="java" id="LC359"><span class="cm"> * After these queries have been sent to the database the threads have to wait until the second is over - then they can query again.</span></span><span class="line" lang="java" id="LC360"><span class="cm"> * By fine-tuning the limit enforced by the semaphore a good balance between performance and database load can be established.</span></span><span class="line" lang="java" id="LC361"><span class="cm"> * It is even possible to chang? the number of available permits at runtime.</span></span><span class="line" lang="java" id="LC362"><span class="cm"> * So this number can be reduced during the typical working hours and increased at night.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC363"><span class="cm"> *</span></span><span class="line" lang="java" id="LC364"><span class="cm"> * &lt;p&gt;The following code examples demonstrate parts of the implementation of such a scenario.</span></span><span class="line" lang="java" id="LC365"><span class="cm"> * First the batch application has to create an instance of {@code TimedSemaphore} and to initialize its properties with default values:&lt;/p&gt;</span></span><span class="line" lang="java" id="LC366"><span class="cm"> *</span></span><span class="line" lang="java" id="LC367"><span class="cm"> * {@code TimedSemaphore semaphore = new TimedSemaphore(1, TimeUnit.SECONDS, 100);}</span></span><span class="line" lang="java" id="LC368"><span class="cm"> *</span></span><span class="line" lang="java" id="LC369"><span class="cm"> * &lt;p&gt;Here we specify that the semaphore should allow 100 permits in one second.</span></span><span class="line" lang="java" id="LC370"><span class="cm"> * This is effectively the limit of database queries per second in our example use case.</span></span><span class="line" lang="java" id="LC371"><span class="cm"> * Next the server threads issuing database queries and performing statistical operations can be initialized.</span></span><span class="line" lang="java" id="LC372"><span class="cm"> * They are passed a reference to the semaphore at creation time. Before they execute a query they have to acquire a permit.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC373"><span class="cm"> *</span></span><span class="line" lang="java" id="LC374"><span class="cm"> * &lt;pre&gt;</span></span><span class="line" lang="java" id="LC375"><span class="cm"> * &lt;code&gt;</span></span><span class="line" lang="java" id="LC376"><span class="cm"> * public class StatisticsTask implements Runnable {</span></span><span class="line" lang="java" id="LC377"><span class="cm"> * // The semaphore for limiting database load.</span></span><span class="line" lang="java" id="LC378"><span class="cm"> *   private final TimedSemaphore semaphore;</span></span><span class="line" lang="java" id="LC379"><span class="cm"> *</span></span><span class="line" lang="java" id="LC380"><span class="cm"> *   public StatisticsTask(TimedSemaphore sem, Connection con) {</span></span><span class="line" lang="java" id="LC381"><span class="cm"> *     semaphore = sem;</span></span><span class="line" lang="java" id="LC382"><span class="cm"> *      ...</span></span><span class="line" lang="java" id="LC383"><span class="cm"> *   }</span></span><span class="line" lang="java" id="LC384"><span class="cm"> *</span></span><span class="line" lang="java" id="LC385"><span class="cm"> *   //The main processing method. Executes queries and evaluates their results.</span></span><span class="line" lang="java" id="LC386"><span class="cm"> *   public void run() {</span></span><span class="line" lang="java" id="LC387"><span class="cm"> *     try {</span></span><span class="line" lang="java" id="LC388"><span class="cm"> *       while (!isDone()) {</span></span><span class="line" lang="java" id="LC389"><span class="cm"> *         semaphore.acquire();    // enforce the load limit</span></span><span class="line" lang="java" id="LC390"><span class="cm"> *         executeAndEvaluateQuery();</span></span><span class="line" lang="java" id="LC391"><span class="cm"> *       }</span></span><span class="line" lang="java" id="LC392"><span class="cm"> *     } catch (InterruptedException iex) {</span></span><span class="line" lang="java" id="LC393"><span class="cm"> *       // fall through</span></span><span class="line" lang="java" id="LC394"><span class="cm"> *     }</span></span><span class="line" lang="java" id="LC395"><span class="cm"> *   }</span></span><span class="line" lang="java" id="LC396"><span class="cm"> * }</span></span><span class="line" lang="java" id="LC397"><span class="cm"> * &lt;/code&gt;</span></span><span class="line" lang="java" id="LC398"><span class="cm"> * &lt;/pre&gt;</span></span><span class="line" lang="java" id="LC399"><span class="cm"> *</span></span><span class="line" lang="java" id="LC400"><span class="cm"> * &lt;p&gt;The important line here is the call to {@code semaphore.acquire()}.</span></span><span class="line" lang="java" id="LC401"><span class="cm"> * If the number of permits in the current time frame has not yet been reached, the call returns immediately.</span></span><span class="line" lang="java" id="LC402"><span class="cm"> * Otherwise, it blocks until the end of the time frame.</span></span><span class="line" lang="java" id="LC403"><span class="cm"> * The last piece missing is a scheduler service which adapts the number of permits allowed by the semaphore according to the time of day.</span></span><span class="line" lang="java" id="LC404"><span class="cm"> * We assume that this service is pretty simple and knows only two different time slots:</span></span><span class="line" lang="java" id="LC405"><span class="cm"> * working shift and night shift.</span></span><span class="line" lang="java" id="LC406"><span class="cm"> * The service is triggered periodically.</span></span><span class="line" lang="java" id="LC407"><span class="cm"> * It then determines the current time slot and configures the timed semaphore accordingly.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC408"><span class="cm"> *</span></span><span class="line" lang="java" id="LC409"><span class="cm"> * &lt;pre&gt;</span></span><span class="line" lang="java" id="LC410"><span class="cm"> * &lt;code&gt;</span></span><span class="line" lang="java" id="LC411"><span class="cm"> * public class SchedulerService {</span></span><span class="line" lang="java" id="LC412"><span class="cm"> *   // The semaphore for limiting database load.</span></span><span class="line" lang="java" id="LC413"><span class="cm"> *   private final TimedSemaphore semaphore;</span></span><span class="line" lang="java" id="LC414"><span class="cm"> *     ...</span></span><span class="line" lang="java" id="LC415"><span class="cm"> *</span></span><span class="line" lang="java" id="LC416"><span class="cm"> *   // Configures the timed semaphore based on the current time of day. This method is called periodically.</span></span><span class="line" lang="java" id="LC417"><span class="cm"> *   public void configureTimedSemaphore() {</span></span><span class="line" lang="java" id="LC418"><span class="cm"> *      int limit;</span></span><span class="line" lang="java" id="LC419"><span class="cm"> *      if (isWorkshift()) {</span></span><span class="line" lang="java" id="LC420"><span class="cm"> *        limit = 50;    // low database load</span></span><span class="line" lang="java" id="LC421"><span class="cm"> *      } else {</span></span><span class="line" lang="java" id="LC422"><span class="cm"> *        limit = 250;   // high database load</span></span><span class="line" lang="java" id="LC423"><span class="cm"> *      }</span></span><span class="line" lang="java" id="LC424"><span class="cm"> *</span></span><span class="line" lang="java" id="LC425"><span class="cm"> *      semaphore.setLimit(limit);</span></span><span class="line" lang="java" id="LC426"><span class="cm"> *   }</span></span><span class="line" lang="java" id="LC427"><span class="cm"> * }</span></span><span class="line" lang="java" id="LC428"><span class="cm"> * &lt;/code&gt;</span></span><span class="line" lang="java" id="LC429"><span class="cm"> * &lt;/pre&gt;</span></span><span class="line" lang="java" id="LC430"><span class="cm"> *</span></span><span class="line" lang="java" id="LC431"><span class="cm"> * &lt;p&gt;With the {@link org.apache.commons.lang3.concurrent.TimedSemaphore#setLimit(int)} method the number of permits allowed for a time frame can be changed.</span></span><span class="line" lang="java" id="LC432"><span class="cm"> * There are some other methods for querying the internal state of a timed semaphore.</span></span><span class="line" lang="java" id="LC433"><span class="cm"> * Also some statistical data is available, e.g. the average number of {@code acquire()} calls per time frame.</span></span><span class="line" lang="java" id="LC434"><span class="cm"> * When a timed semaphore is no more needed, its {@code shutdown()} method has to be called.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC435"><span class="cm"> */</span></span><span class="line" lang="java" id="LC436"><span class="kn">package</span><span> </span><span>org.apache.commons.lang3.concurrent</span><span>;</span></span>
</code>
</pre>
    </div>
</div>