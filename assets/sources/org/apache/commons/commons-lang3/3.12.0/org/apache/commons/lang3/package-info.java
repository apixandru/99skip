<div class="file-content code js-syntax-highlight white" id="blob-content">
    <div class="line-numbers">
        <a class="file-line-num diff-line-num"
           data-line-number="1"
           id="L1" href="#L1">1</a><a class="file-line-num diff-line-num"
           data-line-number="2"
           id="L2" href="#L2">2</a><a class="file-line-num diff-line-num"
           data-line-number="3"
           id="L3" href="#L3">3</a><a class="file-line-num diff-line-num"
           data-line-number="4"
           id="L4" href="#L4">4</a><a class="file-line-num diff-line-num"
           data-line-number="5"
           id="L5" href="#L5">5</a><a class="file-line-num diff-line-num"
           data-line-number="6"
           id="L6" href="#L6">6</a><a class="file-line-num diff-line-num"
           data-line-number="7"
           id="L7" href="#L7">7</a><a class="file-line-num diff-line-num"
           data-line-number="8"
           id="L8" href="#L8">8</a><a class="file-line-num diff-line-num"
           data-line-number="9"
           id="L9" href="#L9">9</a><a class="file-line-num diff-line-num"
           data-line-number="10"
           id="L10" href="#L10">10</a><a class="file-line-num diff-line-num"
           data-line-number="11"
           id="L11" href="#L11">11</a><a class="file-line-num diff-line-num"
           data-line-number="12"
           id="L12" href="#L12">12</a><a class="file-line-num diff-line-num"
           data-line-number="13"
           id="L13" href="#L13">13</a><a class="file-line-num diff-line-num"
           data-line-number="14"
           id="L14" href="#L14">14</a><a class="file-line-num diff-line-num"
           data-line-number="15"
           id="L15" href="#L15">15</a><a class="file-line-num diff-line-num"
           data-line-number="16"
           id="L16" href="#L16">16</a><a class="file-line-num diff-line-num"
           data-line-number="17"
           id="L17" href="#L17">17</a><a class="file-line-num diff-line-num"
           data-line-number="18"
           id="L18" href="#L18">18</a><a class="file-line-num diff-line-num"
           data-line-number="19"
           id="L19" href="#L19">19</a><a class="file-line-num diff-line-num"
           data-line-number="20"
           id="L20" href="#L20">20</a><a class="file-line-num diff-line-num"
           data-line-number="21"
           id="L21" href="#L21">21</a><a class="file-line-num diff-line-num"
           data-line-number="22"
           id="L22" href="#L22">22</a><a class="file-line-num diff-line-num"
           data-line-number="23"
           id="L23" href="#L23">23</a><a class="file-line-num diff-line-num"
           data-line-number="24"
           id="L24" href="#L24">24</a><a class="file-line-num diff-line-num"
           data-line-number="25"
           id="L25" href="#L25">25</a><a class="file-line-num diff-line-num"
           data-line-number="26"
           id="L26" href="#L26">26</a><a class="file-line-num diff-line-num"
           data-line-number="27"
           id="L27" href="#L27">27</a><a class="file-line-num diff-line-num"
           data-line-number="28"
           id="L28" href="#L28">28</a><a class="file-line-num diff-line-num"
           data-line-number="29"
           id="L29" href="#L29">29</a><a class="file-line-num diff-line-num"
           data-line-number="30"
           id="L30" href="#L30">30</a><a class="file-line-num diff-line-num"
           data-line-number="31"
           id="L31" href="#L31">31</a><a class="file-line-num diff-line-num"
           data-line-number="32"
           id="L32" href="#L32">32</a><a class="file-line-num diff-line-num"
           data-line-number="33"
           id="L33" href="#L33">33</a><a class="file-line-num diff-line-num"
           data-line-number="34"
           id="L34" href="#L34">34</a><a class="file-line-num diff-line-num"
           data-line-number="35"
           id="L35" href="#L35">35</a><a class="file-line-num diff-line-num"
           data-line-number="36"
           id="L36" href="#L36">36</a><a class="file-line-num diff-line-num"
           data-line-number="37"
           id="L37" href="#L37">37</a><a class="file-line-num diff-line-num"
           data-line-number="38"
           id="L38" href="#L38">38</a><a class="file-line-num diff-line-num"
           data-line-number="39"
           id="L39" href="#L39">39</a><a class="file-line-num diff-line-num"
           data-line-number="40"
           id="L40" href="#L40">40</a><a class="file-line-num diff-line-num"
           data-line-number="41"
           id="L41" href="#L41">41</a><a class="file-line-num diff-line-num"
           data-line-number="42"
           id="L42" href="#L42">42</a><a class="file-line-num diff-line-num"
           data-line-number="43"
           id="L43" href="#L43">43</a><a class="file-line-num diff-line-num"
           data-line-number="44"
           id="L44" href="#L44">44</a><a class="file-line-num diff-line-num"
           data-line-number="45"
           id="L45" href="#L45">45</a><a class="file-line-num diff-line-num"
           data-line-number="46"
           id="L46" href="#L46">46</a><a class="file-line-num diff-line-num"
           data-line-number="47"
           id="L47" href="#L47">47</a><a class="file-line-num diff-line-num"
           data-line-number="48"
           id="L48" href="#L48">48</a><a class="file-line-num diff-line-num"
           data-line-number="49"
           id="L49" href="#L49">49</a><a class="file-line-num diff-line-num"
           data-line-number="50"
           id="L50" href="#L50">50</a><a class="file-line-num diff-line-num"
           data-line-number="51"
           id="L51" href="#L51">51</a><a class="file-line-num diff-line-num"
           data-line-number="52"
           id="L52" href="#L52">52</a><a class="file-line-num diff-line-num"
           data-line-number="53"
           id="L53" href="#L53">53</a><a class="file-line-num diff-line-num"
           data-line-number="54"
           id="L54" href="#L54">54</a><a class="file-line-num diff-line-num"
           data-line-number="55"
           id="L55" href="#L55">55</a><a class="file-line-num diff-line-num"
           data-line-number="56"
           id="L56" href="#L56">56</a><a class="file-line-num diff-line-num"
           data-line-number="57"
           id="L57" href="#L57">57</a><a class="file-line-num diff-line-num"
           data-line-number="58"
           id="L58" href="#L58">58</a><a class="file-line-num diff-line-num"
           data-line-number="59"
           id="L59" href="#L59">59</a><a class="file-line-num diff-line-num"
           data-line-number="60"
           id="L60" href="#L60">60</a><a class="file-line-num diff-line-num"
           data-line-number="61"
           id="L61" href="#L61">61</a><a class="file-line-num diff-line-num"
           data-line-number="62"
           id="L62" href="#L62">62</a><a class="file-line-num diff-line-num"
           data-line-number="63"
           id="L63" href="#L63">63</a><a class="file-line-num diff-line-num"
           data-line-number="64"
           id="L64" href="#L64">64</a><a class="file-line-num diff-line-num"
           data-line-number="65"
           id="L65" href="#L65">65</a><a class="file-line-num diff-line-num"
           data-line-number="66"
           id="L66" href="#L66">66</a><a class="file-line-num diff-line-num"
           data-line-number="67"
           id="L67" href="#L67">67</a><a class="file-line-num diff-line-num"
           data-line-number="68"
           id="L68" href="#L68">68</a><a class="file-line-num diff-line-num"
           data-line-number="69"
           id="L69" href="#L69">69</a><a class="file-line-num diff-line-num"
           data-line-number="70"
           id="L70" href="#L70">70</a><a class="file-line-num diff-line-num"
           data-line-number="71"
           id="L71" href="#L71">71</a><a class="file-line-num diff-line-num"
           data-line-number="72"
           id="L72" href="#L72">72</a><a class="file-line-num diff-line-num"
           data-line-number="73"
           id="L73" href="#L73">73</a><a class="file-line-num diff-line-num"
           data-line-number="74"
           id="L74" href="#L74">74</a><a class="file-line-num diff-line-num"
           data-line-number="75"
           id="L75" href="#L75">75</a><a class="file-line-num diff-line-num"
           data-line-number="76"
           id="L76" href="#L76">76</a><a class="file-line-num diff-line-num"
           data-line-number="77"
           id="L77" href="#L77">77</a><a class="file-line-num diff-line-num"
           data-line-number="78"
           id="L78" href="#L78">78</a><a class="file-line-num diff-line-num"
           data-line-number="79"
           id="L79" href="#L79">79</a><a class="file-line-num diff-line-num"
           data-line-number="80"
           id="L80" href="#L80">80</a><a class="file-line-num diff-line-num"
           data-line-number="81"
           id="L81" href="#L81">81</a><a class="file-line-num diff-line-num"
           data-line-number="82"
           id="L82" href="#L82">82</a><a class="file-line-num diff-line-num"
           data-line-number="83"
           id="L83" href="#L83">83</a><a class="file-line-num diff-line-num"
           data-line-number="84"
           id="L84" href="#L84">84</a><a class="file-line-num diff-line-num"
           data-line-number="85"
           id="L85" href="#L85">85</a><a class="file-line-num diff-line-num"
           data-line-number="86"
           id="L86" href="#L86">86</a><a class="file-line-num diff-line-num"
           data-line-number="87"
           id="L87" href="#L87">87</a><a class="file-line-num diff-line-num"
           data-line-number="88"
           id="L88" href="#L88">88</a><a class="file-line-num diff-line-num"
           data-line-number="89"
           id="L89" href="#L89">89</a><a class="file-line-num diff-line-num"
           data-line-number="90"
           id="L90" href="#L90">90</a><a class="file-line-num diff-line-num"
           data-line-number="91"
           id="L91" href="#L91">91</a><a class="file-line-num diff-line-num"
           data-line-number="92"
           id="L92" href="#L92">92</a><a class="file-line-num diff-line-num"
           data-line-number="93"
           id="L93" href="#L93">93</a><a class="file-line-num diff-line-num"
           data-line-number="94"
           id="L94" href="#L94">94</a><a class="file-line-num diff-line-num"
           data-line-number="95"
           id="L95" href="#L95">95</a><a class="file-line-num diff-line-num"
           data-line-number="96"
           id="L96" href="#L96">96</a><a class="file-line-num diff-line-num"
           data-line-number="97"
           id="L97" href="#L97">97</a><a class="file-line-num diff-line-num"
           data-line-number="98"
           id="L98" href="#L98">98</a><a class="file-line-num diff-line-num"
           data-line-number="99"
           id="L99" href="#L99">99</a><a class="file-line-num diff-line-num"
           data-line-number="100"
           id="L100" href="#L100">100</a><a class="file-line-num diff-line-num"
           data-line-number="101"
           id="L101" href="#L101">101</a><a class="file-line-num diff-line-num"
           data-line-number="102"
           id="L102" href="#L102">102</a><a class="file-line-num diff-line-num"
           data-line-number="103"
           id="L103" href="#L103">103</a><a class="file-line-num diff-line-num"
           data-line-number="104"
           id="L104" href="#L104">104</a><a class="file-line-num diff-line-num"
           data-line-number="105"
           id="L105" href="#L105">105</a><a class="file-line-num diff-line-num"
           data-line-number="106"
           id="L106" href="#L106">106</a><a class="file-line-num diff-line-num"
           data-line-number="107"
           id="L107" href="#L107">107</a><a class="file-line-num diff-line-num"
           data-line-number="108"
           id="L108" href="#L108">108</a><a class="file-line-num diff-line-num"
           data-line-number="109"
           id="L109" href="#L109">109</a><a class="file-line-num diff-line-num"
           data-line-number="110"
           id="L110" href="#L110">110</a><a class="file-line-num diff-line-num"
           data-line-number="111"
           id="L111" href="#L111">111</a><a class="file-line-num diff-line-num"
           data-line-number="112"
           id="L112" href="#L112">112</a><a class="file-line-num diff-line-num"
           data-line-number="113"
           id="L113" href="#L113">113</a><a class="file-line-num diff-line-num"
           data-line-number="114"
           id="L114" href="#L114">114</a><a class="file-line-num diff-line-num"
           data-line-number="115"
           id="L115" href="#L115">115</a><a class="file-line-num diff-line-num"
           data-line-number="116"
           id="L116" href="#L116">116</a><a class="file-line-num diff-line-num"
           data-line-number="117"
           id="L117" href="#L117">117</a><a class="file-line-num diff-line-num"
           data-line-number="118"
           id="L118" href="#L118">118</a><a class="file-line-num diff-line-num"
           data-line-number="119"
           id="L119" href="#L119">119</a><a class="file-line-num diff-line-num"
           data-line-number="120"
           id="L120" href="#L120">120</a><a class="file-line-num diff-line-num"
           data-line-number="121"
           id="L121" href="#L121">121</a><a class="file-line-num diff-line-num"
           data-line-number="122"
           id="L122" href="#L122">122</a><a class="file-line-num diff-line-num"
           data-line-number="123"
           id="L123" href="#L123">123</a>
    </div>
    <div class="blob-content"
         data-blob-id="5afbd23d0e021a57af5234311b7287d5ca25c727"
         data-path="src/main/java/main/repo/EmployeeRepo.java"
         data-qa-selector="file_content">
<pre class="code highlight">
<code>
<span class="line" lang="java" id="LC1"><span class="cm">/*</span></span><span class="line" lang="java" id="LC2"><span class="cm"> * Licensed to the Apache Software Foundation (ASF) under one or more</span></span><span class="line" lang="java" id="LC3"><span class="cm"> * contributor license agreements.  See the NOTICE file distributed with</span></span><span class="line" lang="java" id="LC4"><span class="cm"> * this work for additional information regarding copyright ownership.</span></span><span class="line" lang="java" id="LC5"><span class="cm"> * The ASF licenses this file to You under the Apache License, Version 2.0</span></span><span class="line" lang="java" id="LC6"><span class="cm"> * (the &quot;License&quot;); you may not use this file except in compliance with</span></span><span class="line" lang="java" id="LC7"><span class="cm"> * the License.  You may obtain a copy of the License at</span></span><span class="line" lang="java" id="LC8"><span class="cm"> *</span></span><span class="line" lang="java" id="LC9"><span class="cm"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><span class="line" lang="java" id="LC10"><span class="cm"> *</span></span><span class="line" lang="java" id="LC11"><span class="cm"> * Unless required by applicable law or agreed to in writing, software</span></span><span class="line" lang="java" id="LC12"><span class="cm"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><span class="line" lang="java" id="LC13"><span class="cm"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><span class="line" lang="java" id="LC14"><span class="cm"> * See the License for the specific language governing permissions and</span></span><span class="line" lang="java" id="LC15"><span class="cm"> * limitations under the License.</span></span><span class="line" lang="java" id="LC16"><span class="cm"> */</span></span><span class="line" lang="java" id="LC17"><span class="cm">/**</span></span><span class="line" lang="java" id="LC18"><span class="cm"> * &lt;p&gt;Provides highly reusable static utility methods, chiefly concerned with adding value to the {@link java.lang} classes.</span></span><span class="line" lang="java" id="LC19"><span class="cm"> * Most of these classes are immutable and thus thread-safe.</span></span><span class="line" lang="java" id="LC20"><span class="cm"> * However {@link org.apache.commons.lang3.CharSet} is not currently guaranteed thread-safe under all circumstances.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC21"><span class="cm"> *</span></span><span class="line" lang="java" id="LC22"><span class="cm"> * &lt;p&gt;The top level package contains various Utils classes, whilst there are various subpackages including {@link org.apache.commons.lang3.math}, {@link org.apache.commons.lang3.concurrent} and {@link org.apache.commons.lang3.builder}.</span></span><span class="line" lang="java" id="LC23"><span class="cm"> * Using the Utils classes is generally simplicity itself.</span></span><span class="line" lang="java" id="LC24"><span class="cm"> * They are the equivalent of global functions in another language, a collection of stand-alone, thread-safe, static methods.</span></span><span class="line" lang="java" id="LC25"><span class="cm"> * In contrast, subpackages may contain interfaces which may have to be implemented or classes which may need to be extended to get the full functionality from the code.</span></span><span class="line" lang="java" id="LC26"><span class="cm"> * They may, however, contain more global-like functions.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC27"><span class="cm"> *</span></span><span class="line" lang="java" id="LC28"><span class="cm"> * &lt;p&gt;Lang 3.0 requires JDK 1.5+, since Lang 3.2 it requires JDK 6+; The legacy release 2.6 requires JDK 1.2+.</span></span><span class="line" lang="java" id="LC29"><span class="cm"> * In both cases you can find features of later JDKs being maintained by us and likely to be removed or modified in favour of the JDK in the next major version.</span></span><span class="line" lang="java" id="LC30"><span class="cm"> * Note that Lang 3.0 uses a different package than its predecessors, allowing it to be used at the same time as an earlier version.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC31"><span class="cm"> *</span></span><span class="line" lang="java" id="LC32"><span class="cm"> * &lt;p&gt;You will find deprecated methods as you stroll through the Lang documentation. These are removed in the next major version. &lt;/p&gt;</span></span><span class="line" lang="java" id="LC33"><span class="cm"> *</span></span><span class="line" lang="java" id="LC34"><span class="cm"> * &lt;p&gt;All util classes contain empty public constructors with warnings not to use.</span></span><span class="line" lang="java" id="LC35"><span class="cm"> * This may seem an odd thing to do, but it allows tools like Velocity to access the class as if it were a bean.</span></span><span class="line" lang="java" id="LC36"><span class="cm"> * In other words, yes we know about private constructors and have chosen not to use them.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC37"><span class="cm"> *</span></span><span class="line" lang="java" id="LC38"><span class="cm"> * &lt;h2&gt;String manipulation - StringUtils, StringEscapeUtils, RandomStringUtils&lt;/h2&gt;</span></span><span class="line" lang="java" id="LC39"><span class="cm"> *</span></span><span class="line" lang="java" id="LC40"><span class="cm"> * &lt;p&gt;Lang has a series of String utilities.</span></span><span class="line" lang="java" id="LC41"><span class="cm"> * The first is {@link org.apache.commons.lang3.StringUtils}, oodles and oodles of functions which tweak, transform, squeeze and cuddle {@link java.lang.String java.lang.Strings}.</span></span><span class="line" lang="java" id="LC42"><span class="cm"> * In addition to StringUtils, there are a series of other String manipulating classes; {@link org.apache.commons.lang3.RandomStringUtils} and {@link org.apache.commons.lang3.StringEscapeUtils StringEscapeUtils}.</span></span><span class="line" lang="java" id="LC43"><span class="cm"> * RandomStringUtils speaks for itself.</span></span><span class="line" lang="java" id="LC44"><span class="cm"> * It&#39;s provides ways in which to generate pieces of text, such as might be used for default passwords.</span></span><span class="line" lang="java" id="LC45"><span class="cm"> * StringEscapeUtils contains methods to escape and unescape Java, JavaScript, JSON, HTML and XML.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC46"><span class="cm"> *</span></span><span class="line" lang="java" id="LC47"><span class="cm"> * &lt;p&gt;These are ideal classes to start using if you&#39;re looking to get into Lang.</span></span><span class="line" lang="java" id="LC48"><span class="cm"> * StringUtils&#39; {@link org.apache.commons.lang3.StringUtils#capitalize(String)}, {@link org.apache.commons.lang3.StringUtils#substringBetween(String, String)}/{@link org.apache.commons.lang3.StringUtils#substringBefore(String, String) Before}/{@link org.apache.commons.lang3.StringUtils#substringAfter(String, String) After}, {@link org.apache.commons.lang3.StringUtils#split(String)} and {@link org.apache.commons.lang3.StringUtils#join(Object[])} are good methods to begin with.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC49"><span class="cm"> *</span></span><span class="line" lang="java" id="LC50"><span class="cm"> * &lt;h2&gt;Character handling - CharSetUtils, CharSet, CharRange, CharUtils&lt;/h2&gt;</span></span><span class="line" lang="java" id="LC51"><span class="cm"> *</span></span><span class="line" lang="java" id="LC52"><span class="cm"> * &lt;p&gt;In addition to dealing with Strings, it&#39;s also important to deal with chars and Characters.</span></span><span class="line" lang="java" id="LC53"><span class="cm"> * {@link org.apache.commons.lang3.CharUtils} exists for this purpose, while {@link org.apache.commons.lang3.CharSetUtils} exists for set-manipulation of Strings.</span></span><span class="line" lang="java" id="LC54"><span class="cm"> * Be careful, although CharSetUtils takes an argument of type String, it is only as a set of characters.</span></span><span class="line" lang="java" id="LC55"><span class="cm"> * For example, {@code CharSetUtils.delete(&quot;testtest&quot;, &quot;tr&quot;)} will remove all t&#39;s and all r&#39;s from the String, not just the String &quot;tr&quot;. &lt;/p&gt;</span></span><span class="line" lang="java" id="LC56"><span class="cm"> *</span></span><span class="line" lang="java" id="LC57"><span class="cm"> * &lt;p&gt;{@link org.apache.commons.lang3.CharRange} and {@link org.apache.commons.lang3.CharSet} are both used internally by CharSetUtils, and will probably rarely be used.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC58"><span class="cm"> *</span></span><span class="line" lang="java" id="LC59"><span class="cm"> * &lt;h2&gt;JVM interaction - SystemUtils, CharEncoding&lt;/h2&gt;</span></span><span class="line" lang="java" id="LC60"><span class="cm"> *</span></span><span class="line" lang="java" id="LC61"><span class="cm"> * &lt;p&gt;SystemUtils is a simple little class which makes it easy to find out information about which platform you are on.</span></span><span class="line" lang="java" id="LC62"><span class="cm"> * For some, this is a necessary evil. It was never something I expected to use myself until I was trying to ensure that Commons Lang itself compiled under JDK 1.2.</span></span><span class="line" lang="java" id="LC63"><span class="cm"> * Having pushed out a few JDK 1.3 bits that had slipped in ({@code Collections.EMPTY_MAP} is a classic offender), I then found that one of the Unit Tests was dying mysteriously under JDK 1.2, but ran fine under JDK 1.3.</span></span><span class="line" lang="java" id="LC64"><span class="cm"> * There was no obvious solution and I needed to move onwards, so the simple solution was to wrap that particular test in a &lt;code&gt;if (SystemUtils.isJavaVersionAtLeast(1.3f)) {&lt;/code&gt;, make a note and move on.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC65"><span class="cm"> *</span></span><span class="line" lang="java" id="LC66"><span class="cm"> * &lt;p&gt;The {@link org.apache.commons.lang3.CharEncoding} class is also used to interact with the Java environment and may be used to see which character encodings are supported in a particular environment. &lt;/p&gt;</span></span><span class="line" lang="java" id="LC67"><span class="cm"> *</span></span><span class="line" lang="java" id="LC68"><span class="cm"> * &lt;h2&gt;Serialization - SerializationUtils, SerializationException&lt;/h2&gt;</span></span><span class="line" lang="java" id="LC69"><span class="cm"> *</span></span><span class="line" lang="java" id="LC70"><span class="cm"> * &lt;p&gt;Serialization doesn&#39;t have to be that hard!</span></span><span class="line" lang="java" id="LC71"><span class="cm"> * A simple util class can take away the pain, plus it provides a method to clone an object by unserializing and reserializing, an old Java trick.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC72"><span class="cm"> *</span></span><span class="line" lang="java" id="LC73"><span class="cm"> * &lt;h3&gt;Assorted functions - ObjectUtils, ClassUtils, ArrayUtils, BooleanUtils&lt;/h3&gt;</span></span><span class="line" lang="java" id="LC74"><span class="cm"> *</span></span><span class="line" lang="java" id="LC75"><span class="cm"> * &lt;p&gt;Would you believe it, {@link org.apache.commons.lang3.ObjectUtils} contains handy functions for Objects, mainly null-safe implementations of the methods on {@link java.lang.Object}.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC76"><span class="cm"> *</span></span><span class="line" lang="java" id="LC77"><span class="cm"> * &lt;p&gt;{@link org.apache.commons.lang3.ClassUtils} is largely a set of helper methods for reflection.</span></span><span class="line" lang="java" id="LC78"><span class="cm"> * Of special note are the comparators hidden away in ClassUtils, useful for sorting Class and Package objects by name; however they merely sort alphabetically and don&#39;t understand the common habit of sorting {@code java} and {@code javax} first.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC79"><span class="cm"> *</span></span><span class="line" lang="java" id="LC80"><span class="cm"> * &lt;p&gt;Next up, {@link org.apache.commons.lang3.ArrayUtils}.</span></span><span class="line" lang="java" id="LC81"><span class="cm"> * This is a big one with many methods and many overloads of these methods so it is probably worth an in depth look here.</span></span><span class="line" lang="java" id="LC82"><span class="cm"> * Before we begin, assume that every method mentioned is overloaded for all the primitives and for Object.</span></span><span class="line" lang="java" id="LC83"><span class="cm"> * Also, the short-hand &#39;xxx&#39; implies a generic primitive type, but usually also includes Object. &lt;/p&gt;</span></span><span class="line" lang="java" id="LC84"><span class="cm"> *</span></span><span class="line" lang="java" id="LC85"><span class="cm"> * &lt;ul&gt;</span></span><span class="line" lang="java" id="LC86"><span class="cm"> *  &lt;li&gt;ArrayUtils provides singleton empty arrays for all the basic types. These will largely be of use in the Collections API with its toArray methods, but also will be of use with methods which want to return an empty array on error.&lt;/li&gt;</span></span><span class="line" lang="java" id="LC87"><span class="cm"> *  &lt;li&gt;{@code add(xxx[], xxx)} will add a primitive type to an array, resizing the array as you&#39;d expect. Object is also supported. &lt;/li&gt;</span></span><span class="line" lang="java" id="LC88"><span class="cm"> *  &lt;li&gt;{@code clone(xxx[])} clones a primitive or Object array. &lt;/li&gt;</span></span><span class="line" lang="java" id="LC89"><span class="cm"> *  &lt;li&gt;{@code contains(xxx[], xxx)} searches for a primitive or Object in a primitive or Object array. &lt;/li&gt;</span></span><span class="line" lang="java" id="LC90"><span class="cm"> *  &lt;li&gt;{@code getLength(Object)} returns the length of any array or an IllegalArgumentException if the parameter is not an array. {@code hashCode(Object)}, {@code equals(Object, Object)}, {@code toString(Object)} &lt;/li&gt;</span></span><span class="line" lang="java" id="LC91"><span class="cm"> *  &lt;li&gt;{@code indexOf(xxx[], xxx)} and {@code indexOf(xxx[], xxx, int)} are copies of the classic String methods, but this time for primitive/Object arrays. In addition, a lastIndexOf set of methods exists. &lt;/li&gt;</span></span><span class="line" lang="java" id="LC92"><span class="cm"> *  &lt;li&gt;{@code isEmpty(xxx[])} lets you know if an array is zero-sized or null. &lt;/li&gt;</span></span><span class="line" lang="java" id="LC93"><span class="cm"> *  &lt;li&gt;{@code isSameLength(xxx[], xxx[])} returns true if the arrays are the same length. &lt;/li&gt;</span></span><span class="line" lang="java" id="LC94"><span class="cm"> *  &lt;li&gt;Along side the add methods, there are also remove methods of two types. The first type remove the value at an index, {@code remove(xxx[], int)}, while the second type remove the first value from the array, {@code remove(xxx[], xxx)}. &lt;/li&gt;</span></span><span class="line" lang="java" id="LC95"><span class="cm"> *  &lt;li&gt;Nearing the end now. The {@code reverse(xxx[])} method turns an array around. &lt;/li&gt;</span></span><span class="line" lang="java" id="LC96"><span class="cm"> *  &lt;li&gt;The {@code subarray(xxx[], int, int)} method splices an array out of a larger array. &lt;/li&gt;</span></span><span class="line" lang="java" id="LC97"><span class="cm"> *  &lt;li&gt;Primitive to primitive wrapper conversion is handled by the {@code toObject(xxx[])} and {@code toPrimitive(Xxx[])} methods. &lt;/li&gt;</span></span><span class="line" lang="java" id="LC98"><span class="cm"> * &lt;/ul&gt;</span></span><span class="line" lang="java" id="LC99"><span class="cm"> *</span></span><span class="line" lang="java" id="LC100"><span class="cm"> * &lt;p&gt;Lastly, {@link org.apache.commons.lang3.ArrayUtils#toMap(Object[])} is worthy of special note.</span></span><span class="line" lang="java" id="LC101"><span class="cm"> * It is not a heavily overloaded method for working with arrays, but a simple way to create Maps from literals. &lt;/p&gt;</span></span><span class="line" lang="java" id="LC102"><span class="cm"> *</span></span><span class="line" lang="java" id="LC103"><span class="cm"> * &lt;h4&gt;Using toMap&lt;/h4&gt;</span></span><span class="line" lang="java" id="LC104"><span class="cm"> * &lt;pre&gt;</span></span><span class="line" lang="java" id="LC105"><span class="cm"> * &lt;code&gt;</span></span><span class="line" lang="java" id="LC106"><span class="cm"> * Map colorMap = ArrayUtils.toMap(new String[][] {{</span></span><span class="line" lang="java" id="LC107"><span class="cm"> *   {&quot;RED&quot;, &quot;#FF0000&quot;},</span></span><span class="line" lang="java" id="LC108"><span class="cm"> *   {&quot;GREEN&quot;, &quot;#00FF00&quot;},</span></span><span class="line" lang="java" id="LC109"><span class="cm"> *   {&quot;BLUE&quot;, &quot;#0000FF&quot;}</span></span><span class="line" lang="java" id="LC110"><span class="cm"> * });</span></span><span class="line" lang="java" id="LC111"><span class="cm"> * &lt;/code&gt;</span></span><span class="line" lang="java" id="LC112"><span class="cm"> * &lt;/pre&gt;</span></span><span class="line" lang="java" id="LC113"><span class="cm"> *</span></span><span class="line" lang="java" id="LC114"><span class="cm"> * &lt;p&gt;Our final util class is {@link org.apache.commons.lang3.BooleanUtils}.</span></span><span class="line" lang="java" id="LC115"><span class="cm"> * It contains various Boolean acting methods, probably of most interest is the {@link org.apache.commons.lang3.BooleanUtils#toBoolean(String)} method which turns various positive/negative Strings into a Boolean object, and not just true/false as with Boolean.valueOf.&lt;/p&gt;</span></span><span class="line" lang="java" id="LC116"><span class="cm"> *</span></span><span class="line" lang="java" id="LC117"><span class="cm"> * &lt;h2&gt;Flotsam - BitField, Validate&lt;/h2&gt;</span></span><span class="line" lang="java" id="LC118"><span class="cm"> * &lt;p&gt;On reaching the end of our package, we are left with a couple of classes that haven&#39;t fit any of the topics so far. &lt;/p&gt;</span></span><span class="line" lang="java" id="LC119"><span class="cm"> * &lt;p&gt;The {@link org.apache.commons.lang3.BitField} class provides a wrapper class around the classic bitmask integer, whilst the {@link org.apache.commons.lang3.Validate} class may be used for assertions (remember, we support Java 1.2). &lt;/p&gt;</span></span><span class="line" lang="java" id="LC120"><span class="cm"> *</span></span><span class="line" lang="java" id="LC121"><span class="cm"> * @since 1.0</span></span><span class="line" lang="java" id="LC122"><span class="cm"> */</span></span><span class="line" lang="java" id="LC123"><span class="kn">package</span><span> </span><span>org.apache.commons.lang3</span><span>;</span></span>
</code>
</pre>
    </div>
</div>